<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.SfListView.XForms</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.ListView.XForms.AutoScroller">
            <summary>
            The <see cref="T:Syncfusion.ListView.XForms.AutoScroller"/> class contains the auto scroll information of <see cref="T:Syncfusion.ListView.XForms.SfListView"/> when drag and drop is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.AutoScroller.scrollMargin">
            <summary>
            It's used to define the margin to when start the auto scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.AutoScroller.isInAutoScrolling">
            <summary>
            It's used to indicates whether is in auto scrolling or not.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.AutoScroller.isTimerStarted">
            <summary>
            It's used to indicates whether timer is started or not. Since, timer will recreated every time while moving the touch.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.AutoScroller.interval">
            <summary>
            It's used to indicates interval time for auto scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.AutoScroller.allowOutsideScroll">
            <summary>
            It's used to indicates whether allow to outside scrolling.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.AutoScroller.#ctor(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.AutoScroller" /> class.
            </summary>
            <param name="listView">Indicates the instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.AutoScroller.ScrollMargin">
            <summary>
            Gets or sets the value indicating that the auto scrolling should be enabled if the value reaches the view bounds i.e.
            top and bottom bound regions (for vertical orientation), and left and right bound regions (for horizontal orientation) while dragging the items.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.DragStartMode = DragStartMode.OnHold;
            this.listView.AutoScroller.ScrollMargin = 20;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.AutoScroller.Interval">
            <summary>
            Gets or sets the value indicating the auto scrolling process while dragging the items.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.DragStartMode = DragStartMode.OnHold;
            this.listView.AutoScroller.Interval = new TimeSpan(0, 0, 0, 0, 200);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.AutoScroller.AllowOutsideScroll">
            <summary>
            Gets or sets a value indicating whether to auto scroll when the item is dragged outside the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>'s 
            top and bottom bound regions (for vertical orientation), and left and right bound regions (for horizontal orientation).
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.DragStartMode = DragStartMode.OnHold;
            this.listView.AutoScroller.AllowOutsideScroll = true;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.AutoScroller.IsInAutoScrolling">
            <summary>
            Gets or sets a value indicating whether is in auto scrolling or not.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.AutoScroller.ListView">
            <summary>
            Gets or sets the instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.AutoScroller.ScrollBounds">
            <summary>
            Gets the auto scroll bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.AutoScroller.Dispose">
            <summary>
            Disposes all allocated resources.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.AutoScroller.PerformAutoScroll(System.Double,System.Double)">
            <summary>
            Helper method to perform the auto scrolling while perform the drag and drop.
            </summary>
            <param name="start">Indicates the start position of the drag item. That is top or left based on orientation.</param>
            <param name="end">Indicates the end position of the drag item. That is bottom or right based on orientation.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.AutoScroller.StopAutoScrolling">
            <summary>
            Helper method to disable the auto scrolling.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.AutoScroller.Dispose(System.Boolean)">
            <summary>
            Disposes the instances, if the parameter is set to true.
            </summary>
            <param name="disposing">If true, dispose all the allocated objects</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.AutoScroller.CanAutoScroll(System.Double,System.Double,System.Boolean@)">
            <summary>
            Helper method to check whether to start the auto scrolling or not.
            </summary>
            <param name="start">Indicates the start position to check for enable the auto scrolling or not.</param>
            <param name="end">Indicates the end position to check for enable the auto scrolling or not.</param>
            <param name="isDown">If true, the auto scroll direction to down else up.</param>
            <returns>Return true to start the auto scrolling, if false, stop the auto scrolling or disable the scrolling.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.AutoScroller.CanStopAutoScroll(System.Double,System.Boolean)">
            <summary>
            Helper method to check whether to stop the auto scrolling or not.
            </summary>
            <param name="offset">Indicates the scroll offset.</param>
            <param name="isDown">If true, the auto scroll direction to down else up.</param>
            <returns>Return true to stop the auto scrolling else not.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.AutoScroller.GetClipPoints">
            <summary>
            Get the clipped points of the row.
            </summary>
            <returns>Returns the current drag item position.</returns>
        </member>
        <member name="T:Syncfusion.ListView.XForms.DragDropController">
            <summary>
            It contains the drag and drop related operations.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.startItemIndex">
            <summary>
            It's used to indicates the start drag item index when dragging is started.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.endItemIndex">
            <summary>
            It's used to indicates the end drag item index being dragging. And the item is reordered after dropped by using this index.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.previousItemIndex">
            <summary>
            It's used to indicates that previous item index when after layout while perform dragging. The layout is perform while dragging using this index.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.initialYPosition">
            <summary>
            It's used to indicates that initial position drag item for vertical orientation. By using this index, drag position will calculated while perform dragging. 
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.initialXPosition">
            <summary>
            It's used to indicates that initial position drag item for horizontal orientation. By using this index, drag position will calculated while perform dragging. 
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.isInLayout">
            <summary>
            It's used to indicates that whether item is in layout or not. Since when perform the drag and drop faster, layout will happened animated and that time the dragging will ended. So by using this flag it will hold until layout completed.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.isMovingUpOrLeft">
            <summary>
            It's used to indicates that dragging direction for find next item index. By using this index, find the next or previous item and layout it.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.dragViewItem">
            <summary>
            It's used to store the drag item view for layout it while perform dragging. Since we are layout the item which is direct children of VisualContainer.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.actualRect">
            <summary>
            It's used to store the actual drag item rectangle value. It will used to reset the drag item if drop cancelled or drop in the same position.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.items">
            <summary>
            It's used to hold the display items. Based on these collection find the previous or next item and layout it while perform dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.dragItemSize">
            <summary>
            It's used to store the drag line size and used to reset the size when auto scrolling is completed. Then only the actual drag item will be moved into dropped position.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.needtoStopDragging">
            <summary>
            It's used to indicates whether item is in dragging or not and to reset the drag end after layout is completed. Since drag item is in layout while perform drag and drop faster.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.dropPosition">
            <summary>
            It's used to hold the drop item position. Since while drag and drop faster the layout will happened even drag stopped. So until layout completed, we have hold the drop and then call the dropping after complete. So for that we need to maintain the position.
            Store the drop position in dragging until drop since if we calculate the position in renderer it will return last layout position from view even if we dropped in out of view.
            It will update in drag start also since we have to pass the drag start position if not dragging while drop the item.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragDropController.startPoint">
            <summary>
            Backing field to hold the start position when dragging is started.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.DragDropController" /> class.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.#ctor(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.DragDropController" /> class.
            </summary>
            <param name="listView">Denotes the instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.DragDropController.UpdateSource">
            <summary>
            Gets or sets a value indicating whether to update the underlying items when drag and drop is performed.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.DragDropController.Items">
            <summary>
            Gets the display items when dragging is started.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.DragDropController.DragItemData">
            <summary>
            Gets or sets the value which indicates the drag item data to avoid the reusing while ensure the items when perform the auto scrolling.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.DragDropController.ListView">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> instance.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.DragDropController.IsInDragging">
            <summary>
            Gets or sets a value indicating whether item is in dragging or not.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.DragDropController.SkipCollectionChanged">
            <summary>
            Gets or sets a value indicating whether collection changed process in <see cref="T:Syncfusion.ListView.XForms.LinearLayout"/> need to be skipped when <see cref="P:Syncfusion.ListView.XForms.DragDropController.UpdateSource"/> is true.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.Dispose">
            <summary>
            Disposes the allocated objects.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.GetPositionFrombounds(Xamarin.Forms.Rectangle,System.Double@,System.Double@)">
            <summary>
            Method to get the position based on the bounds value of the item.
            </summary>
            <param name="bounds">Indicates the bounds value of the dragged item</param>
            <param name="prevPosition">Indicates the previous dragging touch position</param>
            <param name="nextPosition">Indicates the next dragging touch position</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.ResetListViewItem">
            <summary>
            Helper method to reset the index when auto scrolling completed.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.HandleTouchInteractions(Syncfusion.ListView.XForms.ListViewItemInfoBase,Xamarin.Forms.GestureStatus,Xamarin.Forms.Point,Xamarin.Forms.Point)">
            <summary>
            Handles the touch interactions for drag and drop operation.
            </summary>
            <param name="itemInfo">Indicates the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfo"/> for drag and drop.</param>
            <param name="status">Indicates the Gestures action.</param>
            <param name="point">Indicates the touch position based on <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
            <param name="touchPosition">Indicates the touch position based on screen position.</param>
            <returns>Returns true, if touch is handled by DragDropController itself.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.Dispose(System.Boolean)">
            <summary>
            Disposes the instances, if the parameter is set to true.
            </summary>
            <param name="disposing">If true, dispose all the allocated objects</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.CanAdjustDragItemAxis">
            <summary>
            Decides to adjust the X position of the drag item for vertical <see cref="T:Syncfusion.ListView.XForms.Orientation"/> and Y position for horizontal <see cref="T:Syncfusion.ListView.XForms.Orientation"/>.
            </summary>
            <returns>Return true, adjust X position of drag item else adjust only Y co-ordinates for vertical <see cref="T:Syncfusion.ListView.XForms.Orientation"/>. For horizontal orientation, consider vice versa.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.OnLayoutItem(Xamarin.Forms.View,Xamarin.Forms.Rectangle)">
            <summary>
            Helper method to layout every item while dragging.
            </summary>
            <param name="element">Indicates the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> for layout. </param>
            <param name="rect">Indicates the rectangle value  for layout.</param>
            <returns>Return true if layout is completed or else return false.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.ProcessDragStarted(Syncfusion.ListView.XForms.ListViewItemInfoBase,Xamarin.Forms.Point,Xamarin.Forms.Point)">
            <summary>
            Helper method to process the drag started operations.
            </summary>
            <param name="itemInfo">Indicates the current drag started item info.</param>
            <param name="point">Indicates the position of the drag item.</param>
            <param name="touchPosition">Indicates the touch position based on screen.</param>
            <returns>Return true if drag operation is started. Return false if drag cancelled.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.ProcessDragging(Xamarin.Forms.Point,Xamarin.Forms.Point)">
            <summary>
            Helper method to handle the dragging operations.
            </summary>
            <param name="point">Indicates the dragging touch position.</param>
            <param name="touchPosition">Indicates the touch position based on screen.</param>
            <returns>Return true if dragging is performed. Return false if dragging is cancelled.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.ProcessDragEnded">
            <summary>
            Helper method to handle the drag ended operations.
            </summary>
            <returns>Return true if dragging completed. Returns false if drag end is cancelled.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.ProcessDragViewItemLayout(System.Boolean,Xamarin.Forms.Thickness,System.Boolean)">
            <summary>
            Helper method to layout the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> on dragging.
            </summary>
            <param name="isVertical">Indicates the orientation of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>. If true, vertical orientation else horizontal.</param>
            <param name="itemSpacing">Indicates the item spacing for the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
            <param name="canLayout">Indicates the layout of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.LayoutItem(Xamarin.Forms.View,Xamarin.Forms.Rectangle,System.Int32)">
            <summary>
            Helper method to layout <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> while dragging
            </summary>
            <param name="element">Indicates the layout item.</param>
            <param name="rect">Indicates the rectangle value for layout.</param>
            <param name="endIndex">Indicates the drag end index.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.UpdateLineSize(System.Int32,System.Int32)">
            <summary>
            Update the line size being dragging the item.
            </summary>
            <param name="previousIndex">Indicates the previous index of item while dragging.</param>
            <param name="nextIndex">Indicates the next index of item while dragging.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.ResetLineSize(System.Int32,System.Int32)">
            <summary>
            Resets the size of the line by remove and insert from RowHeights.
            </summary>
            <param name="removeAtIndex">Indicates that index from remove the line.</param>
            <param name="insertAtIndex">Indicates that index into insert the line.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.FindEndItemIndex(System.Double,System.Double)">
            <summary>
            Helper method to find the end item index while dragging based on orientation of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="prevPosition">Indicates the previous position (top or left) value of drag item.</param>
            <param name="nextPosition">Indicates the next position (bottom or right) value of drag item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.ShowPopupView(Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Show the drag popup view when holding the item.
            </summary>
            <param name="itemInfo">Indicates the holding item info.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.InitializeDragPopupView(Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Initialize the drag popup view
            </summary>
            <param name="itemInfo">Indicates the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfo"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.GetDragItemLayoutRect(System.Double,System.Double)">
            <summary>
            Helper method to get the layout rectangle value for drag item based on considering the <see cref="M:Syncfusion.ListView.XForms.DragDropController.CanAdjustDragItemAxis"/> method.
            </summary>
            <param name="dragXPosition">Indicates x position of the drag item.</param>
            <param name="dragYPosition">Indicates y position of the drag item.</param>
            <returns>Returns the layout rectangle value for drag item.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.HidePopupView">
            <summary>
            Remove the drag popup view.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.ResetDragListViewItem(System.Object,System.Boolean)">
            <summary>
            Reset the dragging <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> after dragging ended.
            </summary>
            <param name="itemData">Indicates the underlying data of drag item.</param>
            <param name="resetLayout">If true, need to reset the drag item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.ResetDragging">
            <summary>
            Helper method to reset the dragging.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.PeformAutoScroll(System.Double,System.Double)">
            <summary>
            Helper method to perform the auto scrolling.
            </summary>
            <param name="prevPosition">Indicates the previous position (top or left) value of drag item.</param>
            <param name="nextPosition">Indicates the next position (bottom or right) value of drag item.</param>
            <returns>Return true if in auto scrolling else return false.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.UpdateDraggedItem(System.Object)">
            <summary>
            Reorder the item from one group to another group when <see cref="T:Syncfusion.ListView.XForms.SfListView"/> have groups.
            </summary>
            <param name="dragItem">Indicates the drag item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.GetDraggingItemGroup(System.Object,System.Boolean)">
            <summary>
            Helper method to find the group of corresponding item data.
            </summary>
            <param name="itemData">Indicates the item data.</param>
            <param name="isDisplayItems">Indicates that whether want to find the group from display items or items.</param>
            <returns>Return the group of corresponding item.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragDropController.UpdateItemData(System.Int32,System.Int32,System.Object,System.Object)">
            <summary>
            Helper method to update the underlying data in collection when an item is dropped into another position.
            </summary>
            <param name="oldindex">Identifies the drag item index.</param>
            <param name="newIndex">Identifies the drop item index.</param>
            <param name="dragitem">Represents the dragging item data.</param>
            <param name="itemKey">Represents the key value of the item data.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.DragIndicatorView">
            <summary>
            To display the drag indicator in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> item for perform drag and drop operation.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragIndicatorView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.DragIndicatorView" /> class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.DragIndicatorView.ListView">
            <summary>
            Gets or sets a value which indicates the instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragIndicatorView.Dispose">
            <summary>
            Disposes the allocated objects.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragIndicatorView.ShouldInvalidateOnChildAdded(Xamarin.Forms.View)">
            <summary>
            Avoids the child view invalidate when adding into <see cref="T:Syncfusion.ListView.XForms.DragIndicatorView"/>.
            </summary>
            <param name="child">Indicates the child view.</param>
            <returns>Return false to avoid invalidate.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragIndicatorView.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View)">
            <summary>
            Avoids the child view invalidate when removing from <see cref="T:Syncfusion.ListView.XForms.DragIndicatorView"/>.
            </summary>
            <param name="child">Indicates the child view.</param>
            <returns>Return false to avoid invalidate.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragIndicatorView.Dispose(System.Boolean)">
            <summary>
            Disposes the instances, if the parameter is set to true.
            </summary>
            <param name="disposing">If true, dispose all the allocated objects</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.DragItemView">
            <summary>
            To display the dragging item by provided drag and drop template.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragItemView.visibility">
            <summary>
            It's used to indicates the visibility of <see cref="T:Syncfusion.ListView.XForms.DragItemView"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragItemView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.DragItemView" /> class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.DragItemView.Visibility">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.ListView.XForms.DragItemView"/> is in visible or not.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragItemView.Dispose">
            <summary>
            Dispose the allocated objects.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragItemView.AddChild(Xamarin.Forms.View)">
            <summary>
            Add the content for <see cref="T:Syncfusion.ListView.XForms.DragItemView"/>.
            </summary>
            <param name="child">Indicates the child view like template.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragItemView.ShouldInvalidateOnChildAdded(Xamarin.Forms.View)">
            <summary>
            To avoid the child view invalidate when added into <see cref="T:Syncfusion.ListView.XForms.DragItemView"/>.
            </summary>
            <param name="child">Indicates the child view.</param>
            <returns>Return false to avoid invalidate.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragItemView.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View)">
            <summary>
            To avoid the child view invalidate when removed from <see cref="T:Syncfusion.ListView.XForms.DragItemView"/>.
            </summary>
            <param name="child">Indicates the child view.</param>
            <returns>Return false to avoid invalidate.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragItemView.OnChildAdded(Xamarin.Forms.Element)">
            <summary>
            To force layout the item after added into <see cref="T:Syncfusion.ListView.XForms.DragItemView"/>.
            </summary>
            <param name="child">Indicates the child element of the view.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.DragItemView.Dispose(System.Boolean)">
            <summary>
            Dispose the instances, if parameter is true.
            </summary>
            <param name="disposing">If true, dispose all the allocated objects</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.Helpers.InverseBoolConverter">
            <summary>
            Converter to reverse the boolean value. (i.e. if the value is true, it returns false).
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Helpers.InverseBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert either true or false.
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The TargetType</param>
            <param name="parameter">The converter parameter</param>
            <param name="culture">The culture info</param>
            <returns>Returns the boolean value based on the CultureInfo</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Helpers.InverseBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert either true or false.
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The TargetType</param>
            <param name="parameter">The converter parameter</param>
            <param name="culture">The culture info</param>
            <returns>Returns the boolean value</returns>
        </member>
        <member name="T:Syncfusion.ListView.XForms.Helpers.ObjectToStringConverter">
            <summary>
            A converter for convert object value to string.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Helpers.ObjectToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert object to string.
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The TargetType</param>
            <param name="parameter">The converter parameter</param>
            <param name="culture">The culture info</param>
            <returns>Returns the formatted value based on the CultureInfo</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Helpers.ObjectToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert string to object.
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The TargetType</param>
            <param name="parameter">The converter parameter</param>
            <param name="culture">The culture info</param>
            <returns>Returns the value</returns>
        </member>
        <member name="T:Syncfusion.ListView.XForms.Helpers.NamespaceDoc">
            <summary>
            Provides helper classes for <see cref="T:Syncfusion.ListView.XForms.SfListView"/> which contains a converters to work with <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SelectionMode">
            <summary>
            Defines constants that specify the selections supported by the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SelectionMode.Single">
            <summary>
            Specifies the selection mode as single that restricts selection for only one item at a time in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SelectionMode.SingleDeselect">
            <summary>
            Specifies the selection mode as single that restricts selection for only one item at a time in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            In addition it lets you to de-select the selected item.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SelectionMode.Multiple">
            <summary>
            Specifies the selection mode as multiple that allows selection for multiple items in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SelectionMode.None">
            <summary>
            Specifies the selection mode as none that restricts selection in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.DragStartMode">
            <summary>
            Defines the drag start option for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragStartMode.None">
            <summary>
            Indicates that drag will be disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragStartMode.OnHold">
            <summary>
            Indicates that drag operation can be performed by holding the item.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragStartMode.OnDragIndicator">
            <summary>
            Indicates that drag operation can be performed by <see cref="T:Syncfusion.ListView.XForms.DragIndicatorView"/> in the item.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.DragAction">
            <summary>
            Defines the item drag option for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragAction.Start">
            <summary>
            Indicates that item dragging is started. 
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragAction.Dragging">
            <summary>
            Indicates that item is in dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.DragAction.Drop">
            <summary>
            Indicates that item dragging is completed.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.Orientation">
            <summary>
            Orientation for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.Orientation.Vertical">
            <summary>
            Indicates for every items in the <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemsSource"/> property will be layout as vertical orientation.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.Orientation.Horizontal">
            <summary>
            Indicates for every items in the <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemsSource"/> property will be layout as horizontal orientation.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.TouchGesture">
            <summary>
            Describes the possible values of touch operation. These values are used when updating selection in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.TouchGesture.Tap">
            <summary>
            Specifies the gesture recognition type as tap.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.TouchGesture.DoubleTap">
            <summary>
            Specifies the gesture recognition type as double tap.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.TouchGesture.Hold">
            <summary>
            Specifies the gesture recognition type as hold.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SwipeDirection">
            <summary>
            Defines constants that specify the swipe directions.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SwipeDirection.Left">
            <summary>       
            Specifies that the swiping is made in the left direction.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SwipeDirection.Right">
            <summary>
            Specifies that the swiping is made in the right direction.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SwipeDirection.Top">
            <summary>
            Specifies that the swiping is made in the top direction.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SwipeDirection.Bottom">
            <summary>
            Specifies that the swiping is made in the bottom direction.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemType">
            <summary>
            Item type for the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfoBase"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ItemType.Record">
            <summary>
            Specifies the item type of the header item.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ItemType.Header">
            <summary>
            Specifies the item type of the header item.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ItemType.Footer">
            <summary>
            Specifies the item type of the footer item.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ItemType.LoadMore">
            <summary>
            Specifies the item type of the load more item.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ItemType.GroupHeader">
            <summary>
            Specifies the item type of the group header item.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.LoadMoreOption">
            <summary>
            Defines option for the load more support of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.LoadMoreOption.None">
            <summary>
            Load more option will not be enabled. 
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.LoadMoreOption.Auto">
            <summary>
            Automatically executes the load more command when end of the list is reached.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.LoadMoreOption.Manual">
            <summary>
            Displays the load more button when end of the list is reached and executes the load more command when the button is tapped.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.LoadMoreOption.AutoOnScroll">
            <summary>
            Executes the load more command when UI interaction happens with the list view and when end of the list is reached.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.LoadMorePosition">
            <summary>
            Defines position for the load more support of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.LoadMorePosition.Top">
            <summary>
            Load more view will be positioned on the top of the list.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.LoadMorePosition.Bottom">
            <summary>
            Load more view will be positioned on the bottom of the list.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.AutoFitMode">
            <summary>
            Defines the AutoFit mode for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.AutoFitMode.None">
            <summary>
            Considers the value of <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemSize"/> and layout the items.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.AutoFitMode.Height">
            <summary>
            AutoFits the item based on its content. When layout, consider the height of an item.
            </summary>
            <remarks>For horizontal <see cref="P:Syncfusion.ListView.XForms.SfListView.Orientation"/>, consider the width of the item.
            For <see cref="T:Syncfusion.ListView.XForms.GridLayout"/>, after AutoFit all items in a row, it will take the maximum item height in that row and applies to all other items in the row.
            </remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.AutoFitMode.DynamicHeight">
            <summary>
            AutoFits the item based on its content and update the layout of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> if the content's height or width is changed at runtime.
            </summary>
            <remarks>For horizontal <see cref="P:Syncfusion.ListView.XForms.SfListView.Orientation"/>, considers the width of the item.
            For <see cref="T:Syncfusion.ListView.XForms.GridLayout"/>, after AutoFit all items in a row, it will take the maximum item height in that row and applies to all other items in the row.
            </remarks>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ScrollState">
            <summary>
            Defines the different scroll states for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ScrollState.Idle">
            <summary>
            Specifies that <see cref="T:Syncfusion.ListView.XForms.SfListView"/> is not currently scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ScrollState.Dragging">
            <summary>
            Specifies that <see cref="T:Syncfusion.ListView.XForms.SfListView"/> is currently being dragged in the view.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ScrollState.Fling">
            <summary>
            Specifies that fling action is performed on <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ScrollState.Programmatic">
            <summary>
            Specifies that scrolling is performed by using <see cref="!:SfListView.ScrollTo(double)"/> or <see cref="M:Syncfusion.ListView.XForms.LayoutBase.ScrollToRowIndex(System.Int32,Syncfusion.ListView.XForms.ScrollToPosition,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ScrollToPosition">
            <summary>
            Defines the position in the view of the row index when <see cref="M:Syncfusion.ListView.XForms.LayoutBase.ScrollToRowIndex(System.Int32,Syncfusion.ListView.XForms.ScrollToPosition,System.Boolean)"/> is performed.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ScrollToPosition.Start">
            <summary>
            Scrolls row index to be positioned at the start of the view.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ScrollToPosition.MakeVisible">
            <summary>
            Scrolls to make row index visible in the view. If the RowIndex is already in view scrolling will not occur.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ScrollToPosition.Center">
            <summary>
            Scrolls row index to be positioned at the center of the view.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ScrollToPosition.End">
            <summary>
            Scrolls row index to be positioned at the end of the view.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.FooterPosition">
            <summary>
            Defines the position of the footer when <see cref="P:Syncfusion.ListView.XForms.SfListView.IsStickyFooter"/> is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.FooterPosition.Default">
            <summary>
            The FooterItem will be positioned at the end of the View.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.FooterPosition.Body">
            <summary>
            The FooterItem will be positioned inside the body of the ListView when the items are less than the view size.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ListViewCachingStrategy">
            <summary>
            Caching strategy for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ListViewCachingStrategy.RetainElement">
            <summary>
            Indicates that for every item in the <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemsSource"/> property will be constructed, a single unique element.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ListViewCachingStrategy.RecycleElement">
            <summary>
            Indicates that cells are created only the items are in view. And updated their binding contexts based on items when view gets updated.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.VirtualKey">
            <summary>
            Describes the possible values of keyboard interactions. These values are used when updating selection in a <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.Down">
            <summary>
            Specifies the keyboard interaction type as down arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.Up">
            <summary>
            Specifies the keyboard interaction type as up arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.Left">
            <summary>
            Specifies the keyboard interaction type as left arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.Right">
            <summary>
            Specifies the keyboard interaction type as right arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.Shift">
            <summary>
            Specifies the keyboard interaction type as shift key.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.Ctrl">
            <summary>
            Specifies the keyboard interaction type as control key.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.Alt">
            <summary>
            Specifies the keyboard interaction type as alt key.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.Tab">
            <summary>
            Specifies the keyboard interaction type as tab key.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.Home">
            <summary>
            Specifies the keyboard interaction type as home key.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.End">
            <summary>
            Specifies the keyboard interaction type as end key.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.PageUp">
            <summary>
            Specifies the keyboard interaction type as page up key.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.PageDown">
            <summary>
            Specifies the keyboard interaction type as page down key.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.A">
            <summary>
            Specifies the keyboard interaction type as A key.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.VirtualKey.Space">
            <summary>
            Specifies the keyboard interaction type as Space key.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemTappedEventHandler">
            <summary>
            Represents the method that will handle the ItemTapped event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The data for the event.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ListViewLoadedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.Loaded"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The data for the event.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemDoubleTappedEventHandler">
            <summary>
            Represents the method that will handle the ItemDoubleTapped event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The data for the event.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemHoldingEventHandler">
            <summary>
            Represents the method that will handle the ItemHold event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The data for the event.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemAppearingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="T:Syncfusion.ListView.XForms.ItemAppearingEventArgs"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The data for the event.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemDisappearingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="T:Syncfusion.ListView.XForms.ItemDisappearingEventArgs"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The data for the event.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.QueryItemSizeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.QueryItemSize"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The data for the event.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemSelectionChangingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.SelectionChanging"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The data for the event.</param>
            <seealso cref="T:Syncfusion.ListView.XForms.ItemSelectionChangingEventHandler"/>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemSelectionChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.SelectionChanged"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The data for the event.</param>
            <seealso cref="T:Syncfusion.ListView.XForms.ItemSelectionChangedEventHandler"/>
        </member>
        <member name="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanding"/> and <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsing"/> events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A <see cref="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SwipeStartedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeStarted"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The data for the event.</param>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipingEventHandler"/>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipeEndedEventHandler"/>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SwipeEndedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeEnded"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The data for the event.</param>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipeStartedEventHandler"/>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipingEventHandler"/>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SwipingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.Swiping"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The data for the event.</param>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipeStartedEventHandler"/>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipeEndedEventHandler"/>
        </member>
        <member name="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanded"/> and <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsed"/> events.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A <see cref="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangedEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ResetSwipeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeReset"/>event.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            A <see cref="T:Syncfusion.ListView.XForms.ResetSwipeEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemDraggingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemDragging"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">Denotes the instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
            <param name="e">Denotes the arguments of dragging event.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ScrollStateChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.ListView.XForms.SfListView.ScrollStateChanged"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The data for the event.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ListViewLoadedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.ListView.XForms.SfListView.Loaded"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewLoadedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ListViewLoadedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemTappedEventArgs">
            <summary>
            Provides data for the ItemTapped event.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ItemTappedEventArgs.position">
            <summary>
            Represents the touch position at the tapped item.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemTappedEventArgs.#ctor(Syncfusion.ListView.XForms.ItemType,System.Object,Xamarin.Forms.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ItemTappedEventArgs"/> class.
            </summary>
            <param name="itemType">The item type of the tapped item.</param>
            <param name="itemData">The item data of the tapped item.</param>
            <param name="position">The touch position at the tapped item.</param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemTappedEventArgs.ItemType">
            <summary>
            Gets the item index at the tapped position.
            </summary>
            <value>It represents the item index at the tapped position.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemTappedEventArgs.ItemData">
            <summary>
            Gets the item at the tapped position.
            </summary>
            <value>An object that represents the item at the tapped position.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemTappedEventArgs.Position">
            <summary>
            Gets the touch position at the tapped position.
            </summary>
            <value>It represents the touch position at the tapped item.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemTappedEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether to handle the event or not.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemDoubleTappedEventArgs">
            <summary>
            Provides data for the ItemDoubleTapped event.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ItemDoubleTappedEventArgs.position">
            <summary>
            Represents the touch position at the double tapped item.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemDoubleTappedEventArgs.#ctor(Syncfusion.ListView.XForms.ItemType,System.Object,Xamarin.Forms.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ItemDoubleTappedEventArgs"/> class.
            </summary>
            <param name="itemType">The item type of the double tapped item.</param>
            <param name="itemData">The item data of the double tapped item.</param>
            <param name="position">The touch position at the double tapped item.</param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDoubleTappedEventArgs.ItemType">
            <summary>
            Gets the item index at the tapped position.
            </summary>
            <value>It represents the item index at the tapped position.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDoubleTappedEventArgs.ItemData">
            <summary>
            Gets the item at the tapped position.
            </summary>
            <value>An object that represents the item at the tapped position.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDoubleTappedEventArgs.Position">
            <summary>
            Gets the touch position at the tapped position.
            </summary>
            <value>It represents the touch position at the tapped item.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDoubleTappedEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether to handle the event or not.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemHoldingEventArgs">
            <summary>
            Provides data for the ItemHold event.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ItemHoldingEventArgs.position">
            <summary>
            Represents the touch position on holding the item.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemHoldingEventArgs.#ctor(Syncfusion.ListView.XForms.ItemType,System.Object,Xamarin.Forms.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ItemHoldingEventArgs"/> class.
            </summary>
            <param name="itemType">The item type of the item hold position.</param>
            <param name="itemData">The item data of the held item.</param>
            <param name="position">The touch position of the held item.</param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemHoldingEventArgs.ItemType">
            <summary>
            Gets the item index at the tapped position.
            </summary>
            <value>It represents the item index at the tapped position.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemHoldingEventArgs.ItemData">
            <summary>
            Gets the item at the tapped position.
            </summary>
            <value>An object that represents the item at the tapped position.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemHoldingEventArgs.Position">
            <summary>
            Gets the touch position at the tapped position.
            </summary>
            <value>An object that represents the touch position at the tapped item.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemHoldingEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether to handle the event or not.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemAppearingEventArgs">
            <summary>
            Provides data for the ItemAppearing event.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ItemAppearingEventArgs.itemData">
            <summary>
            To underlying data object of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemAppearingEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ItemAppearingEventArgs"/> class.
            </summary>
            <param name="itemData">The item data of the appearing item</param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemAppearingEventArgs.ItemData">
            <summary>
            Gets the underlying data object of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> when item appearing from the bound data source.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemDisappearingEventArgs">
            <summary>
            Provides data for the ItemDisappearing event.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ItemDisappearingEventArgs.itemData">
            <summary>
            To underlying data object of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemDisappearingEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ItemDisappearingEventArgs"/> class.
            </summary>
            <param name="itemData">The item data of the disappearing item</param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDisappearingEventArgs.ItemData">
            <summary>
            Gets the underlying data object of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> when item disappearing from the bound data source.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.QueryItemSizeEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.ListView.XForms.SfListView.QueryItemSize"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.QueryItemSizeEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.QueryItemSizeEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.QueryItemSizeEventArgs.ItemIndex">
            <summary>
            Gets the index of the item in the <see cref="T:Syncfusion.DataSource.DisplayItems"/> collection.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.QueryItemSizeEventArgs.ItemSize">
             <summary>
            Gets or sets the size of an item. For vertical orientation, it will be considered as item height. For horizontal orientation, it will be considered as item width. 
             </summary>
             <remarks>For <see cref="T:Syncfusion.ListView.XForms.GridLayout"/>, size of the largest item in a row will be set 
             to all other items in that row.
             </remarks>
        </member>
        <member name="P:Syncfusion.ListView.XForms.QueryItemSizeEventArgs.ItemData">
            <summary>
            Gets the underlying data of the queried item.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.QueryItemSizeEventArgs.ItemType">
            <summary>
            Gets the item type of the queried item.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.QueryItemSizeEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event should be handled or not.
            </summary>
            <remarks>
            If true, set the queried item size to a row otherwise get the default item size.
            </remarks>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ScrollStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.ListView.XForms.SfListView.ScrollStateChanged"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ScrollStateChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ScrollStateChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ScrollStateChangedEventArgs.ScrollState">
            <summary>
            Gets the scrolling state of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <value>It represents the scroll state for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</value>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemSelectionChangingEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.ListView.XForms.SfListView.SelectionChanging"/> event.
            </summary>
            <seealso cref="T:Syncfusion.ListView.XForms.ItemSelectionChangingEventArgs"/>
            <seealso cref="T:System.ComponentModel.CancelEventArgs"/>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemSelectionChangingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ItemSelectionChangingEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemSelectionChangingEventArgs.AddedItems">
            <summary>
            Gets a list that contains the items that were selected.
            </summary>
            <value>A list of items to be selection.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemSelectionChangingEventArgs.RemovedItems">
            <summary>
            Gets a list that contains the items that were unselected.
            </summary>
            <value>A list of items to be removed selection.</value>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemSelectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.ListView.XForms.SfListView.SelectionChanged"/> event.
            </summary>
            <seealso cref="T:Syncfusion.ListView.XForms.ItemSelectionChangingEventArgs"/>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemSelectionChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ItemSelectionChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemSelectionChangedEventArgs.AddedItems">
            <summary>
            Gets a list that contains the items that were selected.
            </summary>
            <value>A list of items selected.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemSelectionChangedEventArgs.RemovedItems">
            <summary>
            Gets a list that contains the items that were unselected.
            </summary>
            <value>A list of items unselected.</value>
        </member>
        <member name="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanding"/> and <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsing"/> events.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventArgs.Groups">
            <summary>
            Gets a list that corresponding groups being expanded or collapsed in view.
            </summary>
            <value>
            The <see cref="T:Syncfusion.DataSource.Extensions.GroupResult"/> that is being changed in view.
            </value>
        </member>
        <member name="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanded"/> and <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsed"/> events.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GroupExpandCollapseChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangedEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.GroupExpandCollapseChangedEventArgs.Groups">
            <summary>
            Gets a list that corresponding groups expanded or collapsed in view.
            </summary>
            <value>
            The <see cref="T:Syncfusion.DataSource.Extensions.GroupResult"/> that is being changed in view.
            </value>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SwipeStartedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeStarted"/> event.
            </summary>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipingEventArgs"/>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipeEndedEventArgs"/>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeStartedEventArgs.ItemData">
            <summary>
            Gets the underlying data object of the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> from the bound data source.
            </summary>
            <value>The underlying data object of the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> from the bound data source.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeStartedEventArgs.SwipeDirection">
            <summary>
            Gets the swipe direction of the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <value>The swipe direction of the swiped listViewItem.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeStartedEventArgs.ItemIndex">
            <summary>
            Gets the index of the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> in the DataSource.DisplayItems of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <value>The item index of the swiped listViewItem.</value>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SwipeEndedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeEnded"/> event.
            </summary>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipeStartedEventArgs"/>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipingEventArgs"/>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeEndedEventArgs.SwipeOffset">
            <summary>
            Gets or sets the swipe offset of the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <value>The swipe offset of the swiped listViewItem.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeEndedEventArgs.ItemData">
            <summary>
            Gets the underlying data object of the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> from the bound data source.
            </summary>
            <value>The underlying data object of the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> from the bound data source.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeEndedEventArgs.SwipeDirection">
            <summary>
            Gets the swipe direction of the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <value>The swipe direction of the swiped listViewItem.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeEndedEventArgs.ItemIndex">
            <summary>
            Gets the index of the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> in the DataSource.DisplayItems of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <value>The item index of the swiped listViewItem.</value>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SwipingEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.ListView.XForms.SfListView.Swiping"/> event.
            </summary>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipeStartedEventArgs"/>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipeEndedEventArgs"/>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipingEventArgs.SwipeOffSet">
            <summary>
            Gets the current swipe offset of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> being swiped.
            </summary>
            <value>The current swipe offset of the listViewItem being swiped.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipingEventArgs.ItemData">
            <summary>
            Gets the underlying data object of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> being swiped from the bound data source.
            </summary>
            <value>The underlying data object of the listViewItem being swiped from the bound data source.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipingEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the current swiped offset of swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> should be remain same till the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeEnded"/> is raised.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipingEventArgs.SwipeDirection">
            <summary>
            Gets the swipe direction of the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <value>The swipe direction of the swiped listViewItem.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipingEventArgs.ItemIndex">
            <summary>
            Gets the index of swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> in the DataSource.DisplayItems of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <value>The item index of the swiped listViewItem.</value>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ResetSwipeEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeReset"/> event.
            </summary>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipingEventArgs"/>
            <seealso cref="T:Syncfusion.ListView.XForms.SwipeEndedEventArgs"/>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ResetSwipeEventArgs.ItemIndex">
            <summary>
            Gets the index of swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> in the DataSource.DisplayItems of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <value>The item index of the swiped listViewItem.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ResetSwipeEventArgs.ItemData">
            <summary>
            Gets the underlying data object of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> being swiped from the bound data source.
            </summary>
            <value>The underlying data object of the listViewItem being swiped from the bound data source.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ResetSwipeEventArgs.SwipeOffSet">
            <summary>
            Gets the current swipe offset of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> being swiped.
            </summary>
            <value>The current swipe offset of the listViewItem being swiped.</value>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemDraggingEventArgs">
            <summary>
            Provides item drag and drop related information for the <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemDragging"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDraggingEventArgs.OldIndex">
            <summary>
            Gets the index of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> in the DataSource.DisplayItems of <see cref="T:Syncfusion.ListView.XForms.SfListView"/> where the item drag started.
            </summary>
            <value>The item index of the dragging <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> where dragging started.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDraggingEventArgs.NewIndex">
            <summary>
            Gets the index of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> in DataSource.DisplayItems of <see cref="T:Syncfusion.ListView.XForms.SfListView"/> being dragged. Denotes the same index for <see cref="T:Syncfusion.ListView.XForms.DragAction"/> is Start.
            </summary>
            <value>The item index of the dragging <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> where dragging ended.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDraggingEventArgs.ItemData">
            <summary>
            Gets the underlying data object of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> being dragged from the bound data source.
            </summary>
            <value>The underlying data object of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> being dragging from the bound data source.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDraggingEventArgs.Bounds">
            <summary>
            Gets the bounds of the drag <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> when performing the drag-and-drop operations.
            </summary>
            <value>The bounds of dragging <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/></value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDraggingEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether to handle the dragging item or not. It is applicable only for dragging <see cref="T:Syncfusion.ListView.XForms.DragAction"/>.
            </summary>
            <value>If true, the dragging will not be happened else dragging the item.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDraggingEventArgs.Action">
            <summary>
            Gets the item drag options when performing drag-and-drop operations.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemDraggingEventArgs.Position">
            <summary>
            Gets the touch position in the drag item when performing drag-and-drop operations. Denotes from the actual screen.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.IMeasureSize">
            <summary>
            Defines methods that must be implemented to measure the dimensions of a view.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.IMeasureSize.CalculateSize(Syncfusion.ListView.XForms.SfListView,Xamarin.Forms.View,Xamarin.Forms.Size,System.Boolean)">
            <summary>
            Measures the size of given view based on the view size.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
            <param name="content">The view of item template.</param>
            <param name="viewSize">The actual view size of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
            <param name="isMeasureInvalidated">Represents whether the child element is in MeasureInvalidated process.</param>
            <returns>Returns the measure size of view.</returns>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ILocalizeText">
            <summary>
            Defines method to get the localize text from each render projects.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ILocalizeText.GetLocalizeText">
            <summary>
            Get the localize test from each render projects based on culture.
            </summary>
            <returns>Returns the localize text based on culture.</returns>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ListViewResourceManager">
            <summary>
            Represents the resource manager class for the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewResourceManager.Manager">
            <summary>
            Gets or sets the instance of <see cref="T:System.Resources.ResourceManager"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.Control.Helper.PlatformsHelper">
            <summary>
            Helper class for provide information in platform specific.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helper.PlatformsHelper.SetItemVisibility(Syncfusion.ListView.XForms.IVisibility,System.Boolean)">
            <summary>
            Helper method for set the visibility of item.
            </summary>
            <param name="item">The ListView item.</param>
            <param name="isVisible">Represents the visibility of the ListView item.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper">
            <summary>
            Helper class to provide information for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.GetVisualContainer(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Helper method to get the <see cref="T:Syncfusion.ListView.XForms.VisualContainer"/> class.
            </summary>
            <param name="listView">Represents the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
            <returns>Returns the <see cref="T:Syncfusion.ListView.XForms.VisualContainer"/>.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.GetScrollView(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Helper method to get the <see cref="T:Syncfusion.ListView.XForms.ExtendedScrollView"/> class.
            </summary>
            <param name="listView">Represents the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
            <returns>Returns the scroll view.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.HasHorizontalRTL(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Helper method to find whether <see cref="N:Syncfusion.ListView"/> have LeftToRight flow direction or RightToLeft flow direction with horizontal orientation.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
            <returns>Returns true if <see cref="N:Syncfusion.ListView"/> have RightToLeft flow direction and the <see cref="N:Syncfusion.ListView"/> orientation is horizontal.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.HasScrollableHeader(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Helper method to find whether listView have header or not.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
            <returns>Returns true if listView have header else false.</returns>
            <remarks>If Scrolling is disabled for listview then returns true to denote header is scrollable.</remarks>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.HasScrollableFooter(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Helper method to find whether listView have footer or not.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
            <returns>Returns true if listView have footer else false.</returns>
            <remarks>If Scrolling is disabled for listview then returns true to denote footer is scrollable.</remarks>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.HasStickyGroupHeader(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Helper method to fidn whether listview have scrollable group header or not.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
            <returns>Returns true if listview have sticky group header else false</returns>
            <remarks>If Scrolling is disabled for listview then returns false to denote group header is not sticky.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.GetFirstRecordRowIndex(Syncfusion.ListView.XForms.SfListView)" -->
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.GetLastRecordRowIndex(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Helper method to find the last record index when the visual container has either footer or load more at bottom is present.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
            <returns>Returns the last record index value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.ResolveNextOrPreviousItemIndex(Syncfusion.ListView.XForms.SfListView,System.Int32,System.Boolean)">
            <summary>
            Helper method to get the next or previous item index based on the key navigation.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
            <param name="itemindex">Represents the next item index.</param>
            <param name="isNextItem">Represents that whether the index need to be calculated for next or above item.</param>
            <returns>Represents the actual item index needed to draw the border.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.ResolveItemdata(Syncfusion.ListView.XForms.SfListView,System.Int32)">
            <summary>
            Helper method to get the actual item data by considering the sticky header and group header items.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
            <param name="itemindex">Represents the next item index.</param>
            <returns>Represents the actual item data needed to draw the border.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.GetRowIndexfromItemIndex(Syncfusion.ListView.XForms.SfListView,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Helper method to get the row index from the item index.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
            <param name="actualitemindex">Represents the item index</param>
            <param name="startItemindex">Represents the starting item index in a row.</param>
            <param name="childcount">Represents the total child count in a row.</param>
            <returns>Returns the row index from the item index.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.ResolveIndexInGridLayout(Syncfusion.ListView.XForms.SfListView,System.Int32,System.Int32@,System.Int32@,System.Int32,System.Int32,Syncfusion.ListView.XForms.VirtualKey)">
            <summary>
            Helper method to resolve the item and row index if <see cref="P:Syncfusion.ListView.XForms.SfListView.LayoutManager"/> is <see cref="T:Syncfusion.ListView.XForms.GridLayout"/> for key navigation.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
            <param name="resolvebyindex">Represents the value need to be add or subtract to get the next or previous index.</param>
            <param name="itemindex">Represents the item index</param>
            <param name="rowIndex">Represents the row index</param>
            <param name="visibleline">Represents the visible line index either first or last line index.</param>
            <param name="linecount">Represents the visible lines count</param>
            <param name="key">Represents the <see cref="T:Syncfusion.ListView.XForms.VirtualKey"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.GetItemSpacing(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Helper method to calculate the item spacing of <see cref="T:Syncfusion.ListView.XForms.SfListView"/> based on the <see cref="P:Syncfusion.ListView.XForms.SfListView.Orientation"/>.
            </summary>
            <param name="listView">Represents the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
            <returns>Returns the spacing value required between the items.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.InvalidateForceLayout(Xamarin.Forms.Layout{Xamarin.Forms.View})">
            <summary>
            Used to invalidated the layout of the view.
            </summary>
            <param name="view">Represents a view.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.ProcessAutoOnScroll(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Helper method to raise the RefreshLoadMoreItem while interacting with the list view, when AutoOnScroll load more is enabled.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.Control.Helpers.SfListViewHelper.EnableLoadMoreTemplate(Syncfusion.ListView.XForms.SfListView,Syncfusion.ListView.XForms.ListViewItemInfo)">
            <summary>
            Helper method to enable the visibility of the LoadMoreTemplate, when interaction happens with the list view when AutoOnScroll load more is enabled.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
            <param name="item">Represents the LoadMore item.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.Control.Helpers.NamespaceDoc">
            <summary>
            Provides helper classes for <see cref="T:Syncfusion.ListView.XForms.SfListView"/> which contains a extension methods to work with <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ReflectionHelper">
            <summary>
            Helper class for reflection the properties, methods etc.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ReflectionHelper.GetProperty(System.Type,System.String)">
            <summary>
            Helper method to get the internal property information.
            </summary>
            <param name="type">Represents the type of the property.</param>
            <param name="name">Represents the name of the property.</param>
            <returns>Returns the declared property.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ReflectionHelper.GetMethod(System.Type,System.String)">
            <summary>
            Helper method to get the internal method.
            </summary>
            <param name="type">Represents the type of the property</param>
            <param name="name">Represents the name of the property</param>
            <returns>Returns the declared method</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ReflectionHelper.InvokeMethod(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Helper method to invoke an internal method using reflection.
            </summary>
            <param name="instance">Represents the instance to be reflected</param>
            <param name="methodInfo">Represents the method name</param>
            <param name="parameters">Represents the parameters to be passed</param>
            <returns>Returns the invoked method</returns>
        </member>
        <member name="T:Syncfusion.ListView.XForms.TemplateViewCache">
            <summary>
            Class used to cache the template and view for the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> and reuse it if same template is used.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.TemplateViewCache.#ctor(Xamarin.Forms.DataTemplate,Xamarin.Forms.View)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.TemplateViewCache"/> class.
            </summary>
            <param name="template">Represents the <see cref="T:Xamarin.Forms.DataTemplate"/> for listView item.</param>
            <param name="view">Represents the view for listView item.</param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.TemplateViewCache.Template">
            <summary>
            Gets or sets the template.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.TemplateViewCache.View">
            <summary>
            Gets or sets the view.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.LoadMoreIndicator">
            <summary>
            A loading indicator which will be displayed when loading more items into the list view is in progress. 
            (i.e., When <see cref="P:Syncfusion.ListView.XForms.SfListView.IsBusy"/> property is true.)
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ItemGenerator">
            <summary>
            Generates the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> instances in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.#ctor(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Initializes a new instance of the ItemGenerator class.
            </summary>
            <param name="listView">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> instance</param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemGenerator.DisplayItems">
            <summary>
            Gets the <see cref="T:Syncfusion.DataSource.DisplayItems"/> from DataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ItemGenerator.CachedTemplateViews">
            <summary>
            Gets or sets the list of <see cref="T:Syncfusion.ListView.XForms.TemplateViewCache"/> to reuse the view if same template is used.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.Dispose">
            <summary>
            Disposes all allocated resources.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.CreateLoadMoreItem(System.Int32,Xamarin.Forms.DataTemplate)">
            <summary>
            Used to create load more view at the end of the items.
            </summary>
            <param name="rowindex"> The row index for load more view.</param>
            <param name="template">Data template for listView item.</param>
            <returns>ListViewItemInfo of load more view</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.UpdateLoadMoreItem(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Int32,Xamarin.Forms.DataTemplate)">
            <summary>
            Update the load more view, if user provided their own template. Else create a default load more label.
            </summary>
            <param name="itemInfo">The itemInfo for load more view.</param>
            <param name="rowindex">Update row index for load more view.</param>
            <param name="template">Data template for listView item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.ProcessLoadMoreItem">
            <summary>
            Execute load more command only when it is in manual mode.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.RaiseItemAppearing(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Object)">
            <summary>
            After updating the binding context, Raise the <see cref="T:Syncfusion.ListView.XForms.ItemAppearingEventArgs"/> event and ItemAppearing virtual method
            </summary>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
            <param name="data">Indicates the item data of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.RaiseItemDisappearing(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Object)">
            <summary>
            Before updating the binding context, Raise the <see cref="T:Syncfusion.ListView.XForms.ItemDisappearingEventArgs"/> event and ItemDisappearing virtual method
            </summary>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
            <param name="data">Indicates the item data of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.ProcessGroupHeaderItem(Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Process the <see cref="T:Syncfusion.ListView.XForms.GroupHeaderItem"/> to be expanded or collapsed when it is tapped.
            </summary>
            <param name="item">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.GetTemplate(Syncfusion.ListView.XForms.ItemType,System.Object)">
            <summary>
            Get template for listView item.
            </summary>
            <param name="itemType">Indicates the type of the item.</param>
            <param name="data">Indicates the item data</param>
            <returns>Returns the template</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.OnCreateListViewItem(System.Int32,Syncfusion.ListView.XForms.ItemType,System.Object)">
            <summary>
            Helper method to create the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> based on the <see cref="T:Syncfusion.ListView.XForms.ItemType"/>.
            </summary>
            <param name="itemIndex">Indicates the item index of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
            <param name="type">Indicates the item type of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
            <param name="data">Indicates the item data of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
            <returns>Returns the instance of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> based on <see cref="T:Syncfusion.ListView.XForms.ItemType"/>.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.CreateUIElement">
            <summary>
            Used to create the UIElement of item.
            </summary>
            <returns>The new instance of <see cref="T:Xamarin.Forms.Label"/></returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.CreateLoadMoreView(Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Used to create the LoadMoreView of the item.
            </summary>
            /// <param name="item">The listView item</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.TemplateCacheContains(Xamarin.Forms.DataTemplate)">
            <summary>
            Helper method to return the <see cref="T:Syncfusion.ListView.XForms.TemplateViewCache"/> from the <see cref="P:Syncfusion.ListView.XForms.ItemGenerator.CachedTemplateViews"/> based on <see cref="T:Xamarin.Forms.DataTemplate"/> in the parameter.
            </summary>
            <param name="template">Represents the <see cref="T:Xamarin.Forms.DataTemplate"/> for listView item.</param>
            <returns>Returns the <see cref="T:Syncfusion.ListView.XForms.TemplateViewCache"/> based on the given template.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.CreateTemplate(Syncfusion.ListView.XForms.ListViewItemInfoBase,Xamarin.Forms.DataTemplate)">
            <summary>
            Adds the template into the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>
            </summary>
            <param name="item">The listView item</param>
            <param name="template">data template for listView item</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ItemGenerator.UpdateTemplate(Syncfusion.ListView.XForms.ListViewItemInfoBase,Xamarin.Forms.DataTemplate)">
            <summary>
            Update the templates based on the item type.
            </summary>
            <param name="itemInfo">Indicates the information of item info.</param>
            <param name="template">Data template for listView item.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ListViewItem">
            <summary>
            Represents the item of data in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ListViewItem.allowSwiping">
            <summary>
            Indicates check whether the Allow Swiping as true or false in run time.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ListViewItem.isBorderSelected">
            <summary>
            Backing field for the <see cref="P:Syncfusion.ListView.XForms.ListViewItem.IsBorderSelected"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ListViewItem.isInDragging">
            <summary>
            Indicates whether item is in dragging or not.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItem.#ctor(Syncfusion.ListView.XForms.ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> class based on ItemType.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItem.Visibility">
            <summary>
            Gets or sets a value indicating whether the visibility of an item is true or not.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItem.IsChildMeasureInvalidated">
            <summary>
            Need to skip the native renderer creating in MeasureSize dependency while view is measure invalidated.
            </summary>
            <remarks>
            XAMARIN-28596 - When native view is alone get disposed in Carousel, Navigation or Tabbed page swipe, its renderer get created while <see cref="E:Xamarin.Forms.VisualElement.MeasureInvalidated"/> 
            is in process by <see cref="M:Syncfusion.ListView.XForms.IMeasureSize.CalculateSize(Syncfusion.ListView.XForms.SfListView,Xamarin.Forms.View,Xamarin.Forms.Size,System.Boolean)"/> method and PCL view does not get layout with the respective bounds.
            So, content does not updated in view.
            </remarks>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether an item is selected or not.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItem.Clip">
            <summary>
            Gets the clip rectangle of the element. Clips the item when layout with <see cref="T:Syncfusion.ListView.XForms.SwipeView"/> in <see cref="T:Syncfusion.ListView.XForms.GridLayout"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItem.ListViewItemInfo">
            <summary>
            Gets or sets the list view info.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItem.AllowSwiping">
            <summary>
            Gets or sets a value indicating whether an item need to be swiped or not. It is used only in UWP platform.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItem.IsInDragging">
            <summary>
            Gets or sets a value indicating whether an item is in dragging or not.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItem.IsBorderSelected">
            <summary>
            Gets or sets a value indicating whether a border need to draw for the item.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItem.Dispose">
            <summary>
            Disposes all allocated resources.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItem.EffectsViewListItem">
            <summary>
            Gets or sets <see cref="P:Syncfusion.ListView.XForms.ListViewItem.EffectsViewListItem"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItem.AddChild(Xamarin.Forms.View)">
            <summary>
            Add the children to content of content view.
            </summary>
            <param name="child">Represents the child view which is to be added as the content for this instance</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItem.OnChildMeasureInvalidated">
            <summary>
            Method raises when the content size is changed at runtime.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItem.UpdatePropertyChanged(System.String)">
            <summary>
            Helper method to trigger the property changed of property in <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <param name="propertyName">Indicates the property name.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItem.OnItemAppearing">
            <summary>
            Customizes the behavior when overridden if the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> comes into the view.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItem.ShouldInvalidateOnChildAdded(Xamarin.Forms.View)">
            <summary>
            Override method to determine whether to invalidate on child added or not.
            </summary>
            <param name="child">Represents the View which is to be added.</param>
            <returns>Returns the boolean value accordingly.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItem.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View)">
            <summary>
            Override method to determine whether to invalidate on child removed or not.
            </summary>
            <param name="child">Represents the View which is to be removed.</param>
            <returns>Returns the boolean value accordingly.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItem.OnChildAdded(Xamarin.Forms.Element)">
            <summary>
            Override method indicates when child element is added into the list view item.
            </summary>
            <param name="child">Represent the child element of list view item to be added.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItem.Dispose(System.Boolean)">
            <summary>
            Disposes the instances, if the parameter is set to true.
            </summary>
            <param name="disposing">Represents the boolean value for disposing objects</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.EffectsViewListItem">
            <summary>
            Represents the SfEffectsView control
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.EffectsViewListItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.EffectsViewListItem"/> class
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.EffectsViewListItem.EffectsView_AnimationCompleted(System.Object,System.EventArgs)">
            <summary>
            Callback method on ripple animation completed.	
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.EffectsViewListItem.Dispose">
            <summary>
            Disposes all allocated resources.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.EffectsViewListItem.Dispose(System.Boolean)">
            <summary>
            Disposes the instances, if the parameter is set to true
            </summary>
            <param name="disposing">Represents the boolean value for disposing objects</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.HeaderItem">
            <summary>
            Represents the header item of data in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.HeaderItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.HeaderItem"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.FooterItem">
            <summary>
            Represents the footer item of data in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.FooterItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.FooterItem"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.LoadMoreItem">
            <summary>
            Represents the load more item in a <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LoadMoreItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.LoadMoreItem"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.GroupHeaderItem">
            <summary>
            Represents the group header item in a <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GroupHeaderItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.GroupHeaderItem"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ListViewItemInfoBase">
            <summary>
            Provides information for <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ListViewItemInfoBase.initialPosition">
            <summary>
            To store and calculate the offset for swiping. This property is moved from SwipeController to ListViewItemInfoBase for solve the swiping issue when perform by multi touch.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ListViewItemInfoBase.touchPoint">
            <summary>
            Represents the touch position on the element to provide for ApplyEffects when ActualVisual is Material
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.ItemData">
            <summary>
            Gets the data object associated with <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.ListView">
            <summary>
            Gets the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.Element">
            <summary>
            Gets or sets the element.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.Template">
            <summary>
            Gets or sets the template.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.IsDirty">
            <summary>
            Gets or sets a value indicating whether item is dirty.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.IsEnsured">
            <summary>
            Gets or sets a value indicating whether item is ensured.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.ItemType">
            <summary>
            Gets or sets the item type of item.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.IsInSwipe">
            <summary>
            Gets or sets a value indicating whether the item is in swipe or not.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.SwipeOffset">
            <summary>
            Gets or sets the current offset of the swiping item.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.InitialPosition">
            <summary>
            Gets or sets the value indicating whether to store and calculate the offset for swiping. This property is moved from SwipeController to ListViewItemInfoBase for solve the swiping issue when perform by multi touch.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.ItemIndex">
            <summary>
            Gets or sets the row index of item.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItemInfoBase.Dispose">
            <summary>
            Disposes all allocated resources.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItemInfoBase.SetSwipeOffset(System.Double)">
            <summary>
            Method to set the offset value to swipe the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <param name="value">Represents that how much the item need to swipe.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItemInfoBase.HandleTouchInteraction(Syncfusion.ListView.XForms.TouchGesture,Xamarin.Forms.Point)">
            <summary>
            Handles the touch interaction.
            </summary>
            <param name="gesture">Observes the touch gesture</param>
            <param name="position">Represents the touch position</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItemInfoBase.Dispose(System.Boolean)">
            <summary>
            Disposes the instances, if the parameter is true.
            </summary>
            <param name="isDisposing">Represents the boolean value for disposing objects</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ListViewItemInfo">
            <summary>
            Provides information for item info for <see cref="T:Syncfusion.ListView.XForms.LinearLayout"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ListViewItemInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfo"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.GridViewRowInfo">
            <summary>
            Provides information for grid view row info for <see cref="T:Syncfusion.ListView.XForms.GridLayout"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridViewRowInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.GridViewRowInfo.ListViewItems">
            <summary>
            Gets or sets the list of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> for the grid row.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.GridViewRowInfo.RowIndex">
            <summary>
            Gets or sets the row index of <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.GridViewRowInfo.IsEnsured">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/> is ensured or not.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.GridViewRowInfo.IsDirty">
            <summary>
            Gets or sets a value indicating whether IsDirty <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.GridViewRowInfo.ItemType">
            <summary>
            Gets or sets the item type of <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridViewRowInfo.Dispose">
            <summary>
            Disposes the live instances.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridViewRowInfo.Dispose(System.Boolean)">
            <summary>
            Dispose the instances, if parameter is true.
            </summary>
            <param name="isDisposing">Represents the boolean value for disposing objects.</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.GridLayout">
            <summary>
            Arrange the items in a Grid structure with the specified number of columns. It supports both vertical and horizontal orientation.
            </summary>
            <remarks>
            It supports all functionalities (E.g., Grouping, Sorting, Filtering, Swiping, Real-time updates, etc.) like <see cref="T:Syncfusion.ListView.XForms.LinearLayout"/>.
            </remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.GridLayout.SpanCountProperty">
            <summary>
            Identifies the SpanCount bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.GridLayout"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.GridLayout.SpanCount">
            <summary>
            Gets or sets the span count for <see cref="T:Syncfusion.ListView.XForms.GridLayout"/>. That is, number of items to be displayed in a row.
            For horizontal orientation, it specifies the number of items in a column.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.LayoutManager = new GridLayout() { SpanCount = 2 };
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.GetSwipedItem">
            <summary>
            Used to get the Swiped ListViewItem.
            </summary>
            <returns>Returns the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/></returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.RefreshLoadMoreItem">
            <summary>
            Refresh the LoadMoreItem when the items are in visible.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.Dispose">
            <summary>
            Dispose the allocated resources.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.AddChildren">
            <summary>
            Add the children to <see cref="T:Syncfusion.ListView.XForms.VisualContainer"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.ArrangeItems(Xamarin.Forms.Size)">
            <summary>
            Arrange the children in <see cref="T:Syncfusion.ListView.XForms.VisualContainer"/>.
            </summary>
            <param name="size">Size of the view</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.EnsureStickyGroupHeaderItem(System.Int32,System.Double,System.Boolean)">
            <summary>
            Ensure the sticky GroupHeader item to arrange in the View.
            </summary>
            <param name="startRowIndex">Starting index of the row.</param>
            <param name="itemSpacing">Indicates the spacing between the items.</param>
            <param name="visibleStickyGroupHeader">If true, sets the data of the start row index to the sticky GroupHeader.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.EnsureItems(Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection)">
            <summary>
            Ensure the item elements that has to be arranged in the view.
            </summary>
            <param name="visibleLines">The visible lines collection</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.GetItemInfo(System.Object)">
            <summary>
            Gets the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> based on the item data of list view item.
            </summary>
            <param name="itemData">Represents the item data of list view item.</param>
            <returns>Returns <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>, if item data is available in the <see cref="F:Syncfusion.ListView.XForms.GridLayout.items"/> </returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.GetItemIndex(System.Int32,System.Int32@)">
            <summary>
            Helper method to find the item index based on row index and column index.
            </summary>
            <param name="rowIndex">Indicates the current row index.</param>
            <param name="childcount">Indicates the item count in a row.</param>
            <returns>Returns the item index from row index.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.OnItemsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Refresh the listView item whenever the underlying collection is changed.
            </summary>
            <param name="e">Represents the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.RefreshListViewItems(System.Int32,System.Boolean)">
            <summary>
            Sets the ListViewItemInfo.IsDirty property as true to re-update the item when OnSizeAllocated method is called.
            </summary>
            <param name="itemIndex">Optional parameter. If particular item index is passed, that item alone refreshed.
            Otherwise all items will be refreshed.</param>
            <param name="needToReload">If yes, need to reloaded the listView item else no need.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.ResetListViewItems">
            <summary>
            Reset the listView items when <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemsSource"/> is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.ResetAllowSwiping(System.Boolean)">
            <summary>
            Helper method to reset the manipulation mode for items in UWP. When change the <see cref="P:Syncfusion.ListView.XForms.SfListView.AllowSwiping"/> at run time.
            </summary>
            <param name="allowSwiping">Indicates Allow Swiping as true or false at run time.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.ResetListViewItems(Syncfusion.ListView.XForms.ItemType,System.Boolean)">
            <summary>
            Helper method to reset the listView items with whether want to reload the element based on item type.
            </summary>
            <param name="type">The item type of the row</param>
            <param name="needToReload">If yes, need to reloaded the listView item else no need.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.RefreshListViewItem(System.Object,Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Refresh the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> based on the item data of list view item.
            </summary>
            <param name="itemData">Represents the item data of list view item.</param>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfoBase"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.UnLoadListViewItems">
            <summary>
            Helper method to dispose and clear the listView items.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.UpdateRowCount">
            <summary>
            Update the row count to <see cref="T:Syncfusion.ListView.XForms.VisualContainer"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.GetAutoFitItemSize(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Double@,System.Double)">
            <summary>
            Get the row auto row height.
            </summary>
            <param name="itemInfo">Indicates the item info</param>
            <param name="itemSize">indicates the item size.</param>
            <param name="itemSpacing">Indicates the item spacing</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.UpdateSelectedItems">
            <summary>
            Update the selected items when <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionBackgroundColor"/> is changed at runtime.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.UpdateFocusBorderItems">
            <summary>
            Updates the focus border for the items when <see cref="P:Syncfusion.ListView.XForms.SfListView.FocusBorderColor"/> is changed at runtime.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.AbortItemAnimation">
            <summary>
            Abort the all the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> animation if its in layout. Since while drag and drop faster, sometimes items are in layout.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.RefreshBorderSelectionItems(System.Boolean)">
             <summary>
            Refresh the border selection for the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>s.
             </summary>
             <param name="needtorefresh">If true, resets all the focused border items else reset only the focused border item other than the <see cref="P:Syncfusion.ListView.XForms.SfListView.CurrentItem"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.UpdateListViewItemSize(Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Method to update the item size when the content size is changed at runtime.
            </summary>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfoBase"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.SetRowHeightForDynamicChange(System.Int32,Syncfusion.ListView.XForms.GridViewRowInfo,System.Double)">
            <summary>
            Set queried row size into lineSize collection based index.
            </summary>
            <param name="rowIndex">Represents the row index.</param>
            <param name="rowInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.</param>
            <param name="itemSpacing">Represents the item spacing.</param>
            <returns>Returns the measured element size.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.GetItemHeight(Syncfusion.ListView.XForms.GridViewRowInfo)">
            <summary>
            Method to get the row size of the <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.
            </summary>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.</param>
            <returns>Returns the row size of the <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.GetRowCount">
            <summary>
            Get the row count of <see cref="T:Syncfusion.ListView.XForms.GridLayout"/>. Its calculated based on <see cref="P:Syncfusion.ListView.XForms.GridLayout.SpanCount"/> and groups.
            </summary>
            <returns>Returns the row count of <see cref="T:Syncfusion.ListView.XForms.GridLayout"/></returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.OnSpanCountChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when SpanCount property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> <see cref="T:Syncfusion.ListView.XForms.GridLayout"/> as bindable object</param>
            <param name="oldValue">Represents the old span count value.</param>
            <param name="newValue">Represents the new span count value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.CreateOrUpdateGridViewRowInfo(Syncfusion.ListView.XForms.GridViewRowInfo@,System.Int32,Syncfusion.ListView.XForms.ItemType,System.Object,System.Int32,System.Int32,Xamarin.Forms.DataTemplate)">
            <summary>
            Create or update the grid view row items.
            </summary>
            <param name="rowInfo">The information of <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.</param>
            <param name="rowIndex">The actual row index.</param>
            <param name="rowType">Indicates the row type</param>
            <param name="itemData">The item data of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>. Getting the item data while ensure the items If current row is group.</param>
            <param name="startItemIndex">The actual start item index of the row.</param>
            <param name="childCount">Indicates the items count in the row.</param>
            <param name="template">Data template for listView item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.CreateGridViewItems(Syncfusion.ListView.XForms.GridViewRowInfo,System.Object,System.Int32,System.Int32,Xamarin.Forms.DataTemplate)">
            <summary>
            Create the listView items for rows.
            </summary>
            <param name="rowInfo">The information of <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.</param>
            <param name="itemData">The item data of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>. Getting the item data while ensure the items If current row is group.</param>
            <param name="startItemIndex">The actual start item index of the row.</param>
            <param name="childCount">Indicates the items count in the row.</param>
            <param name="template">Data template for listView item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.GetItemType(System.Int32,System.Int32,System.Object@,Syncfusion.ListView.XForms.ItemType@)">
            <summary>
            Sets the ItemType for grid layout items.
            </summary>
            <param name="startItemIndex">Provides the starting item index.</param>
            <param name="rowIndex">Provides the row index for the item.</param>
            <param name="itemData">References the item data.</param>
            <param name="itemType">References the item type.</param>
            <returns>Returns the boolean value whether loop has to be continued.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.UpdateGridViewItems(Syncfusion.ListView.XForms.GridViewRowInfo,System.Object,System.Int32,System.Int32,Xamarin.Forms.DataTemplate)">
            <summary>
            Update the listView item while reuse the rows.
            </summary>
            <param name="rowInfo">The information of <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.</param>
            <param name="itemData">The item data of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>. Getting the item data while ensure the items If current row is group.</param>
            <param name="startItemIndex">The actual start item index of the row.</param>
            <param name="childCount">Indicates the items count in the row.</param>
            <param name="template">Data template for listView item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.RecycleListViewItem(System.Int32,System.Int32,Syncfusion.ListView.XForms.ItemType,Xamarin.Forms.DataTemplate)">
            <summary>
            Reuse the listView item based on start and end item index and row type.
            </summary>
            <param name="startRowIndex">The actual start item index of view.</param>
            <param name="endRowIndex">The actual end item index of view.</param>
            <param name="rowType">The row type of the items.</param>
            <param name="template">Data template for listView item.</param>
            <returns>Returns the <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.SetRowHeight(System.Int32,Syncfusion.ListView.XForms.GridViewRowInfo,System.Double)">
            <summary>
            Set queried row size into lineSize collection based index.
            </summary>
            <param name="rowIndex">Represents the row index.</param>
            <param name="rowInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.</param>
            <param name="itemSpacing">Represents the item spacing.</param>
            <returns>Returns the measured element size.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.GetItemSize(Syncfusion.ListView.XForms.GridViewRowInfo,System.Double@,System.Double)">
            <summary>
            Query item size or AutoFit the item and return the max height of the row.
            </summary>
            <param name="rowInfo">Indicates the row information.</param>
            <param name="rowHeight">Indicates the actual height of the row.</param>
            <param name="itemSpacing">Indicates the item spacing of the row.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.GridLayout.GetRowInfo(System.Object,Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Method to get the <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/> based on the item data and <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfoBase"/>.
            </summary>
            <param name="itemdata">Represents the item data of list view item.</param>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfoBase"/>.</param>
            <returns>Returns the <see cref="T:Syncfusion.ListView.XForms.GridViewRowInfo"/>.</returns>
        </member>
        <member name="T:Syncfusion.ListView.XForms.LayoutBase">
            <summary>
            Defines the base for the layouts.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.LayoutBase.ScrollToPosition">
            <summary>
            To maintain and pass as argument for <see cref="M:Syncfusion.ListView.XForms.LayoutBase.ScrollToRowIndex(System.Int32,Syncfusion.ListView.XForms.ScrollToPosition,System.Boolean)"/> in <see cref="M:Syncfusion.ListView.XForms.LayoutBase.ValidateAndScroll"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.LayoutBase.itemsCacheLimit">
            <summary>
            Number of items reusing in the view.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.LayoutBase.ItemsCacheLimit">
            <summary>
            Gets or sets the cache limit for create and reuse the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>s if different templates are used in <see cref="T:Xamarin.Forms.DataTemplateSelector"/> for better scrolling performance.
            </summary>
            <remarks>
            Based on this value, <see cref="T:Syncfusion.ListView.XForms.SfListView"/> creates the number of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>s for different templates in the view and if new template is created while scrolling and reuse it if same template is used for improving the scrolling performance.
            </remarks>
        </member>
        <member name="P:Syncfusion.ListView.XForms.LayoutBase.ListView">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> instance.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.LayoutBase.DisplayItems">
            <summary>
            Gets the display items.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.ScrollToRowIndex(System.Int32,Syncfusion.ListView.XForms.ScrollToPosition,System.Boolean)">
            <summary>
            Scrolls the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> to the row at the given index.
            </summary>
            <param name="rowIndex">The index of the row to scroll.</param>
            <param name="scrollToPosition">Defines position in the view to which row index is scrolled</param>
            <param name="disableAnimation">true to disable scroll animation while changing the view; otherwise, false. The default is false.</param>
            <remarks>
            When AutoFitMode is height or 'DynamicHeight', scroll animation will be disabled by default in android and iOS. 
            If it is called while loading <see cref="T:Syncfusion.ListView.XForms.SfListView"/>, then set disableAnimation as true to scroll to appropriate row index, else view doesn't scrolled in android
            </remarks>
            <example>
            <code>
            SfListView listView = new SfListView();
            int index = listView.DataSource.DisplayItems.IndexOf(viewModel.Customers[2]); 
            listView.LayoutManager.ScrollToRowIndex(index, ScrollToPosition.MakeVisible , true);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.ScrollToRowIndex(System.Int32,System.Boolean)">
            <summary>
            Scrolls the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> to the row at the given index.
            </summary>
            <param name="rowIndex">The index of the row to scroll.</param>
            <param name="disableAnimation">true to disable scroll animation while changing the view; otherwise, false. The default is false.</param>
            <remarks>
            When AutoFitMode is height or 'DynamicHeight', scroll animation will be disabled by default in android and iOS. 
            If it is called while loading <see cref="T:Syncfusion.ListView.XForms.SfListView"/>, then set disableAnimation as true to scroll to appropriate row index, else view doesn't scrolled in android
            </remarks>
            <example>
            <code>
            SfListView listView = new SfListView();
            int index = listView.DataSource.DisplayItems.IndexOf(viewModel.Customers[2]); 
            listView.LayoutManager.ScrollToRowIndex(index, true);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.RefreshListViewItems(System.Int32,System.Boolean)">
            <summary>
            Sets the ListViewItemInfo.IsDirty property as true to re-update the item when OnSizeAllocated method is called.
            </summary>
            <param name="itemIndex">Optional parameter. If particular item index is passed, that item alone refreshed.
            Otherwise all items will be refreshed.</param>
            <param name="needToReload">If true, reloads the given item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.ResetAllowSwiping(System.Boolean)">
            <summary>
            Sets the ListView.AllowSwiping property as true to re-update the manipulation mode for items in rendering.
            </summary>
            <param name="allowSwiping">Indicates Allow Swiping as true or false at run time.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.UpdateFocusBorderItems">
            <summary>
            Update the focus border for the items when the <see cref="P:Syncfusion.ListView.XForms.SfListView.FocusBorderColor"/> property is changed at runtime.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.AbortItemAnimation">
            <summary>
            Abort the all the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> item animation if its in layout. Since while drag and drop faster, sometimes items are in layout.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.RefreshLoadMoreItem">
             <summary>
            Refresh the LoadMoreItem when the items are in visible in Automatic mode.
             </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.RefreshBorderSelectionItems(System.Boolean)">
             <summary>
            Refresh the border selection for the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>s.
             </summary>
             <param name="needtorefresh">If true, resets all the focused border items else reset only the focused border item other than the <see cref="P:Syncfusion.ListView.XForms.SfListView.CurrentItem"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.GetSwipedItem">
            <summary>
            Returns the swiped item.
            </summary>
            <returns>Returns the list item</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.UpdateListViewItemSize(Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Method to update the item size when the content size is changed at runtime.
            </summary>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfoBase"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.GetRowCount">
            <summary>
            Returns the number of rows to be created from the display items
            </summary>
            <returns>Returns the items count.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.GetVisibleLineInfo(System.Int32)">
            <summary>
            Helper method for find the <see cref="T:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo"/> by index
            </summary>
            <param name="index">The line index</param>
            <returns>Returns the visible line info</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.GetVisibleLines">
            <summary>
            Helper method for find the visible lines based on orientation.
            </summary>
            <returns>Returns the visible lines</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.GetItemSizeBasedOnItemSpacing(Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo,Syncfusion.ListView.XForms.ItemType,System.Boolean)">
            <summary>
            Method to calculate the item size based on Item Spacing of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <param name="line">Represents the Visible lines</param>
            <param name="itemType">Indicates the type of the item.</param>
            <param name="isVertical">Represents the orientation</param>
            <returns>Returns the size of the item</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.IsFirstStickyGroupHeader(Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo,Syncfusion.ListView.XForms.ItemType)">
            <summary>
            Method to find the first sticky group header item.
            </summary>
            <param name="line">Represents the Visible lines</param>
            <param name="itemType">Indicates the type of the item.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.ProcessPositionToScroll(System.Double,Syncfusion.ListView.XForms.ScrollToPosition,System.Int32)">
            <summary>
            Gets the Position of the row for <see cref="M:Syncfusion.ListView.XForms.LayoutBase.ScrollToRowIndex(System.Int32,Syncfusion.ListView.XForms.ScrollToPosition,System.Boolean)"/> 
            </summary>
            <param name="position">The position of the row index in the view to scroll.</param>
            <param name="scrollToPosition">Position for the item in the view</param>
            <param name="rowIndex">Index of the row to scroll</param>
            <returns>Returns the actual scroll offset value based on considering the scroll to position.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.CreateListViewItem(System.Int32,Syncfusion.ListView.XForms.ItemType,System.Object,Xamarin.Forms.DataTemplate)">
            <summary>
            Create the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> based on index, item type and item data.
            </summary>
            <param name="itemIndex">Indicates the item index</param>
            <param name="itemType">Indicates the item type</param>
            <param name="itemData">Indicates the item data.</param>
            <param name="template">Data template for listView item.</param>
            <returns>Returns the ListView item info</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.UpdateListViewItem(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Int32,Syncfusion.ListView.XForms.ItemType,System.Object,Xamarin.Forms.DataTemplate)">
            <summary>
            Update the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <param name="iteminfo">Indicates the information of item info.</param>
            <param name="itemIndex">Indicates the item index.</param>
            <param name="itemType">Indicates the item type.</param>
            <param name="itemData">Indicates the item data.</param>
            <param name="template">Data template for listView item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.UpdateStickyGroupHeader(System.Object@)">
            <summary>
            Helper method to update the sticky group header while scrolling based on item data.
            </summary>
            <param name="itemData">Indicates the item data of <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.QueryItemSize(System.Int32,System.Double@,System.Object,Syncfusion.ListView.XForms.ItemType)">
            <summary>
            Query the item size of the given index.
            </summary>
            <param name="itemIndex">Indicates the item index.</param>
            <param name="itemSize">Indicates the item size.</param>
            <param name="itemData">Indicates the underlying item data.</param>
            <param name="itemType">Indicates the type of the item.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.GetAutoFitItemSize(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Double@,System.Double,System.Int32)">
            <summary>
            Get the AutoFit item size based on bounds of container size.
            </summary>
            <param name="itemInfo">Indicates the item info</param>
            <param name="itemSize">Indicates the item size</param>
            <param name="itemSpacing">Indicates the item spacing</param>
            <param name="spanCount">Indicates the span count</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.ValidateAndScroll">
            <summary>
            Need to manually scroll to particular row index when <see cref="P:Syncfusion.ListView.XForms.SfListView.AutoFitMode"/> is other than <see cref="F:Syncfusion.ListView.XForms.AutoFitMode.None"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.LayoutSwipedItem(Syncfusion.ListView.XForms.ListViewItem,System.Boolean,System.Boolean)">
            <summary>
            Arrange the ListViewItem based on SwipeOffset.
            </summary>
            <param name="item">Denotes the ListView item</param>
            <param name="canAnimateReset">It ensure whether the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> can animated or not while resetting the item.</param>
            <param name="canAnimateLayout">It ensure whether the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> can animated or not while layout the item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.ApplyClipping(Syncfusion.ListView.XForms.ListViewItemInfo,Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo,System.Boolean,System.Double,System.Double,System.Boolean)">
            <summary>
            Apply Clipping calculation for ListViewItem
            </summary>
            <param name="item"></param>
            <param name="line"></param>
            <param name="isVertical"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="isRTL"></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.UpdateHeaderLineCount">
            <summary>
            Method to update the Header line count <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.HeaderLineCount"/>
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.Dispose">
            <summary>
            Dispose the allocated resource.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LayoutBase.ClipItem(Syncfusion.ListView.XForms.ListViewItem)">
            <summary>
            Clip the ListViewItem based on SwipeOffset.
            </summary>
            <param name="item">Denotes the ListView item</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.LinearLayout">
            <summary>
            <see cref="T:Syncfusion.ListView.XForms.LinearLayout"/> is display the items in vertical and horizontal.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.LinearLayout" /> class.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.UpdateItemIndex">
            <summary>
            Update the item index when drop an item in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.DisplayItemsIndexToRowIndex(System.Int32)">
            <summary>
            Helper method to find the row index from the index of DisplayItems.
            </summary>
            <param name="itemIndex">Indicates the index of DisplayItems.</param>
            <returns>Returns the row index from display item index.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.SetRowHeight(Syncfusion.ListView.XForms.ListViewItemInfo,System.Double)">
            <summary>
            Set queried row size into lineSize collection based index.
            </summary>
            <param name="itemInfo">Denotes the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfo"/>.</param>
            <param name="itemSpacing">The item spacing for the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
            <returns>Returns true, if size is updated in lineSize collection, else return false.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.SetRowHeightForDynamicChange(Syncfusion.ListView.XForms.ListViewItemInfo,System.Double)">
            <summary>
            Set queried row size into lineSize collection based index.
            </summary>
            <param name="itemInfo">Denotes the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfo"/>.</param>
            <param name="itemSpacing">The item spacing for the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
            <returns>Returns true, if size is updated in lineSize collection, else return false.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.GetItemHeight(Syncfusion.ListView.XForms.ListViewItemInfo)">
            <summary>
            Method to get the Item size of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfo"/>.</param>
            <returns>Returns the item size of the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.UpdateListViewItemSize(Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Method to update the item size when the content size is changed at runtime.
            </summary>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfoBase"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.OnItemsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Refresh the listView item whenever the underlying collection is changed.
            </summary>
            <param name="e">Represents the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.UpdateSelectedItems">
            <summary>
            Update the selected items when <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionBackgroundColor"/> is changed at runtime.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.UpdateFocusBorderItems">
            <summary>
            Updates the focus border for the items when <see cref="P:Syncfusion.ListView.XForms.SfListView.FocusBorderColor"/> property is changed at runtime.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.ArrangeItems(Xamarin.Forms.Size)">
            <summary>
            Arrange the children in <see cref="T:Syncfusion.ListView.XForms.VisualContainer"/>.
            </summary>
            <param name="size">Size of the view</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.EnsureStickyGroupHeaderItem(System.Int32,System.Double,System.Boolean)">
            <summary>
            Ensure the sticky GroupHeader item to arrange in the View.
            </summary>
            <param name="startRowIndex">Starting index of the row.</param>
            <param name="itemSpacing">Indicated the spacing between the items.</param>
            <param name="visibleStickyGroupHeader">If true, sets the data of the start row index to the sticky GroupHeader.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.EnsureItems(Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection)">
            <summary>
            Ensure the item elements that has to be arranged in the view.
            </summary>
            <param name="visibleLines">The visible lines collection</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.AddChildren">
            <summary>
            Add the children to <see cref="T:Syncfusion.ListView.XForms.VisualContainer"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.UpdateRowCount">
            <summary>
            Update the item count of <see cref="T:Syncfusion.ListView.XForms.VisualContainer"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.GetItemInfo(System.Object)">
            <summary>
            Gets the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> based on the item data of list view item.
            </summary>
            <param name="itemData">Represents the item data of list view item.</param>
            <returns>Returns <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>, if item data is available in the <see cref="F:Syncfusion.ListView.XForms.LinearLayout.items"/> </returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.GetItemIndex(System.Int32,System.Int32@)">
            <summary>
            Helper method to find the item index based on row index and column index.
            </summary>
            <param name="rowIndex">Indicates the current row index.</param>
            <param name="childcount">Indicates the item count in a row.</param>
            <returns>Returns the item index from row index.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.GetRowCount">
            <summary>
            Returns the number of rows to be created from the display items
            </summary>
            <returns>Returns the items count.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.RefreshListViewItem(System.Object,Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Refreshes the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> based on the item data.
            </summary>
            <param name="itemData">Represents the item data of list view item.</param>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfoBase"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.RefreshListViewItems(System.Int32,System.Boolean)">
            <summary>
            Sets the ListViewItemInfo.IsDirty property as true to re-update the item when OnSizeAllocated method is called.
            </summary>
            <param name="itemIndex">Optional parameter. If particular item index is passed, that item alone refreshed. 
            Otherwise all items will be refreshed.</param>
            <param name="needToReload">If true, need to reloaded the listView item else no need.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.ResetListViewItems">
            <summary>
            Resets the items when the <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemsSource"/> is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.ResetAllowSwiping(System.Boolean)">
            <summary>
            Helper method to reset the manipulation mode for items in UWP. When change the <see cref="P:Syncfusion.ListView.XForms.SfListView.AllowSwiping"/> at run time.
            </summary>
            <param name="allowSwiping">Indicates Allow Swiping as true or false at run time.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.ResetListViewItems(Syncfusion.ListView.XForms.ItemType,System.Boolean)">
            <summary>
            Helper method to reset the listView items with whether want to reload the element based on item type.
            </summary>
            <param name="type">The item type of the row</param>
            <param name="needToReload">If yes, need to reloaded the listView item else no need.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.UnLoadListViewItems">
            <summary>
            Helper method to dispose and clear the listView items.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.GetAutoFitItemSize(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Double@,System.Double)">
            <summary>
            Get the row auto row height.
            </summary>
            <param name="itemInfo">Indicates the item info</param>
            <param name="itemSize">indicates the item size.</param>
            <param name="itemSpacing">Indicates the item spacing</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.AbortItemAnimation">
            <summary>
            Abort the all the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> animation if its in layout. Since while drag and drop faster, sometimes items are in layout.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.RefreshBorderSelectionItems(System.Boolean)">
            <summary>
            Refresh the border selection for the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>s.
            </summary>
            <param name="needtorefresh">If true, resets all the focused border items else reset only the focused border item other than the <see cref="P:Syncfusion.ListView.XForms.SfListView.CurrentItem"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.GetSwipedItem">
            <summary>
            Returns the swiped item.
            </summary>
            <returns>Returns the ListView item.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.RefreshLoadMoreItem">
            <summary>
            Refresh the LoadMoreItem when the items are in visible.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.Dispose">
            <summary>
            Dispose the allocated resources.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.RecycleListViewItem(System.Int32,System.Int32,Syncfusion.ListView.XForms.ItemType,Xamarin.Forms.DataTemplate)">
            <summary>
            Reuse the listView item based on start and end item index and row type.
            </summary>
            <param name="startRowIndex">The actual start item index of view.</param>
            <param name="endRowIndex">The actual end item index of view.</param>
            <param name="rowType">The row type of the items.</param>
            <param name="template">Data template for listView item.</param>
            <returns>Returns the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfo"/>.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.GetItemType(System.Int32@,System.Int32,System.Object@,Syncfusion.ListView.XForms.ItemType@)">
            <summary>
            Sets the ItemType for linear layout items.
            </summary>
            <param name="itemIndex">Provides the starting item index.</param>
            <param name="rowIndex">Provides the row index for the item.</param>
            <param name="itemData">References the item data.</param>
            <param name="itemType">References the item type.</param>
            <returns>Returns the boolean value whether loop has to be continued.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.LinearLayout.SetRowHeight(Syncfusion.ListView.XForms.ListViewItemInfo,System.Int32,System.Double@,System.Double)">
            <summary>
            Set row height to lineSize collection by query or AutoFit the item.
            </summary>
            <param name="itemInfo">Indicates the listView item info.</param>
            <param name="index">Indicates the index of the item.</param>
            <param name="size">Indicates the actual size.</param>
            <param name="itemSpacing">Indicates the item spacing.</param>
            <returns>Returns true, if content height is changed and set to row heights, else false.</returns>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SelectionController">
            <summary>
             A class that handles the selection related processes and events.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.#ctor(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.SelectionController"/> class.
            </summary>
            <param name="listView">The instance of <see cref="T:Syncfusion.ListView.XForms.SfListView"/></param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SelectionController.IsInKeyFocus">
            <summary>
            Gets or sets a value indicating whether <see cref="P:Syncfusion.ListView.XForms.SfListView.CurrentItem"/> need to update and skip the selection when key navigation is performed.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.Dispose">
            <summary>
            Disposes all allocated resources.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.HandleTouchInteraction(Syncfusion.ListView.XForms.TouchGesture,Syncfusion.ListView.XForms.ListViewItemInfoBase,Xamarin.Forms.Point)">
            <summary>
            Handles the touch operation to handle selection and raises the event based on the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionGesture"/>.
            </summary>
            <param name="gesture">The <see cref="T:Syncfusion.ListView.XForms.TouchGesture"></see></param>
            <param name="itemInfo">Represents the selected item.</param>
            <param name="position">Represents the touch position of the item</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.HandleKeyInteraction(Syncfusion.ListView.XForms.VirtualKey,System.Boolean)">
            <summary>
            Process the selection based on the key interactions.
            </summary>
            <param name="key">Represents the<see cref="T:Syncfusion.ListView.XForms.VirtualKey"/>.</param>
            <param name="isSingleKeyPressed">Identifies whether only a single key is pressed.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessSingleKeyInteraction(Syncfusion.ListView.XForms.VirtualKey,System.Boolean)">
            <summary>
            Process the key interaction operations when single key is pressed.
            </summary>
            <param name="key">Represents the<see cref="T:Syncfusion.ListView.XForms.VirtualKey"/>.</param>
            <param name="isSingleKeyPressed">Represents whether only a single key is pressed in the keyboard.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessKeySelectionInteraction(System.Object,System.Object,System.Int32,Syncfusion.ListView.XForms.ScrollToPosition)">
            <summary>
            Helper method to process the selection, focus border and scroll to the item.
            </summary>
            <param name="currentitem">Represents the current selected item.</param>
            <param name="itemdata">Represents the selected item.</param>
            <param name="rowIndex">Represents the current selected item's row index.</param>
            <param name="scrollToPosition">Represents the <see cref="T:Syncfusion.ListView.XForms.ScrollToPosition"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessMultipleKeyInteraction(Syncfusion.ListView.XForms.VirtualKey)">
            <summary>
            Process the key interaction operation when multiple key is pressed.
            </summary>
            <param name="key">Represents the<see cref="T:Syncfusion.ListView.XForms.VirtualKey"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessBorderRender(System.Object,System.Boolean)">
            <summary>
            Process the border focus operation when key navigation is performed.
            </summary>
            <param name="itemdata">Represents the item data.</param>
            <param name="isSelected">Represents the value whether border need to be draw or not.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessSelection(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Object)">
            <summary>
            Process the selection based on the selection mode and selected item.
            </summary>
            <param name="itemInfo">Represents the selected item.</param>
            <param name="itemdata">Represents the item data.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessSingleSelection(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Object)">
            <summary>
            Process the single selection operation when <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionMode"/> as single.
            </summary>
            <param name="itemInfo">Represents the selected item.</param>
            <param name="itemdata">Represents the item data.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessMultipleSelection(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Object)">
            <summary>
            Process the multiple selection operation when <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionMode"/> as multiple.
            </summary>
            <param name="itemInfo">Represents the selected item.</param>
            <param name="itemdata">Represents the item data.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessItemSelection(System.Object,System.Object,Syncfusion.ListView.XForms.ListViewItemInfoBase,Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Updates the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectedItems"/> and also triggers the selection events.
            </summary>
            <param name="addedItem">Represents the selected item data.</param>
            <param name="removedItem">Represents the current selected item data.</param>
            <param name="addedItemInfo">Represents the added item info.</param>
            <param name="removedItemInfo">Represents the removed item info.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessSelectionPropertiesChanged(System.Object,System.Object,System.Boolean)">
            <summary>
            Process the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectedItem"/> and <see cref="P:Syncfusion.ListView.XForms.SfListView.CurrentItem"/> property changes.
            </summary>
            <param name="oldValue">Represents the oldValue.</param>
            <param name="newValue">Represents the item.</param>
            <param name="isSelectedItem">Set true, if call from SelectedItem property changed. Else, false.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessSelectedItemsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the selected items collection changed to process the selection.
            </summary>
            <param name="e">Represents the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessItemsSourceChanged(System.Object,System.Object)">
            <summary>
            Process the selection when ItemsSource changed.
            </summary>
            <param name="oldValue">Represents the previous collection</param>
            <param name="newValue">Represents the current collection</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.ProcessSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Process the selection when source collection is changed.
            </summary>
            <param name="e">Represents the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.RaiseSelectionChanging(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object})">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.SelectionChanging"/>.
            </summary>
            <param name="addedItems">The list of added items.</param>
            <param name="removedItems">The list of removed items.</param>
            <returns>A boolean value specifying whether the selection is changed.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.RaiseSelectionChanged(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object})">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.SelectionChanged"/>.
            </summary>
            <param name="addedItems">The list of added items.</param>
            <param name="removedItems">The list of removed items.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.Dispose(System.Boolean)">
            <summary>
            Dispose the instances, if parameter is true.
            </summary>
            <param name="disposing">Represents the boolean value for disposing objects</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.AnimateSelectedItem(Syncfusion.ListView.XForms.ListViewItem)">
            <summary>
            Provides selected <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> to set animation when selecting the item.
            </summary>
            <param name="selectedListViewItem">selected <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.UpdateSelectionProperties">
            <summary>
            Used to update the SelectedItem and CurrentItem properties after selection.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SelectionController.GetRippleColor(Xamarin.Forms.Color)">
            <summary>
            Used to update the ripple color based on SelectionBackground Color..
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SfListView">
             <summary>
             <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control renders a set of data items with different layouts and orientations. Data can be grouped, sorted, and filtered with ease.
             </summary>
             <example>
             The following example demonstrates how to initialize and use the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> in Xamarin.Forms.
             <code>
             using System;
             using System.Collections.Generic;
             using System.ComponentModel;
             using System.Linq;
             using System.Text;
             using System.Threading.Tasks;
             using Syncfusion.ListView.XForms;
             using Xamarin.Forms;
             <para></para>
             namespace BookInfo
             {
             <para></para>
               class BookInfo
               {
             <para></para>
                 public string BookName { get; set; }
                 public string BookAuthor { get; set; }
             <para></para>
                 public BookInfo(string bookName, string bookAuthor)
                 {
                    BookName = bookName;
                    BookAuthor = bookAuthor;
                 }
             <para></para>
             }
             <para></para>
               class BookInfoMainPage : ContentPage
               {
             <para></para>
                 public BookInfoMainPage()
                 {
             <para></para>
                   // Define some data.
                   List<BookInfo> bookInfo = new List</BookInfo>
                   {
                     new BookInfo("Xamarin.Forms", " by Derek Jensen "),
                     new BookInfo("Object-Oriented Programming in C#", "by Sander Rossel"),
                     new BookInfo("iOS Succinctly", "by Ryan Hodson"),
                     new BookInfo("Android Programming", "by Ryan Hodson"),
                   };
             <para></para>
                   // Initializes the SfListView
                   SfListView listView = new SfListView
                   {
                     // Source of the data  
                     ItemsSource = bookInfo,
             <para></para>
                     // Define the template for displaying each item
                     ItemTemplate = new DataTemplate(() =>
                     {
                       // Create a view with bindings for displaying each property.
                       Label bookNameLabel = new Label() { FontSize = 18};
                       bookNameLabel.SetBinding(Label.TextProperty, "BookName");
            <para></para>
                       Label bookAuthorLabel = new Label() { FontSize = 12 };
                       bookAuthorLabel.SetBinding(Label.TextProperty, "BookAuthor");
            <para></para>
                       // returns a ViewCell.
                       return new ViewCell
                       {
                         View = new StackLayout
                         {
                            Children = 
                            {
                              bookNameLabel,
                              bookAuthorLabel
                            }
                         }
                       };    
                     })
                   };
             <para></para>
                   this.Content = listView;
                 }
               }
             }
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.ItemsSourceProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemsSource"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.ItemSizeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemSize"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.HeaderSizeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.HeaderSize"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.FooterSizeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.FooterSize"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.GroupHeaderSizeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.GroupHeaderSize"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.LayoutManagerProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.LayoutManager"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.ItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemTemplate"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.HeaderTemplate"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.FooterTemplateProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.FooterTemplate"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.LoadMoreTemplateProperty">
            <summary>
            Identifies the  <see cref="P:Syncfusion.ListView.XForms.SfListView.LoadMoreTemplate"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.IsBusyProperty">
            <summary>
            Identifies the  <see cref="P:Syncfusion.ListView.XForms.SfListView.IsBusy"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.LoadMoreCommandProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.LoadMoreCommand"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.HoldCommandProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.HoldCommand"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.HoldCommandParameterProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.HoldCommandParameter"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.TapCommandProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.TapCommand"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.TapCommandParameterProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.TapCommandParameter"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.LoadMoreCommandParameterProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.LoadMoreCommandParameter"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.LoadMoreOptionProperty">
            <summary>
            Identifies  <see cref="P:Syncfusion.ListView.XForms.SfListView.LoadMoreOption"/> bindable property.
            </summary>
            <remarks> This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.LoadMorePositionProperty">
            <summary>
            Identifies  <see cref="P:Syncfusion.ListView.XForms.SfListView.LoadMorePosition"/> bindable property.
            </summary>
            <remarks> This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.GroupHeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.GroupHeaderTemplate"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.IsStickyHeaderProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.IsStickyHeader"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.IsStickyFooterProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.IsStickyFooter"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.StickyFooterPositionProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.StickyFooterPosition"/> bindabe property.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.IsStickyGroupHeaderProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.IsStickyGroupHeader"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.AllowGroupExpandCollapseProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.AllowGroupExpandCollapse"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.DataSourceProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.DataSource"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.ItemSpacingProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemSpacing"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.AllowKeyboardNavigationProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.AllowKeyboardNavigation"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.SelectionGestureProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionGesture"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.SelectionModeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionMode"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.SelectedItemsProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectedItems"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.CurrentItemProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.CurrentItem"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.SelectedItemProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectedItem"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.SelectionBackgroundColorProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionBackgroundColor"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.FocusBorderThicknessProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.FocusBorderThickness"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.FocusBorderColorProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.FocusBorderColor"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.OrientationProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.Orientation"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.SwipeOffsetProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.SwipeOffset"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.SwipeThresholdProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.SwipeThreshold"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.AllowSwipingProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.AllowSwiping"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.LeftSwipeTemplateProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.LeftSwipeTemplate"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.RightSwipeTemplateProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.RightSwipeTemplate"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.IsScrollBarVisibleProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.IsScrollBarVisible"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.AutoFitModeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.AutoFitMode"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.DragStartModeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.DragStartMode"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.DragItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.DragItemTemplate"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.SelectedItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectedItemTemplate"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.IsScrollingEnabledProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.ListView.XForms.SfListView.IsScrollingEnabled"/> bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.IsItemsSourceChanging">
            <summary>
            XAMARIN-6304, Need to skip the layout calls when <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemsSource"/> is changed
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.CanAutoOnScroll">
            <summary>
            Need to skip the execution of LoadMoreCommand when list view is initially loaded when AutoOnScroll load more option is enabled. (i.e., It will becomes true, once UI interaction happens with the list view.)
            If LoadMoreOption is changed to AutoOnScroll at run time, CanAutoOnScroll will be set as false. Otherwise, it will be true. 
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.IsHorizontalRTLViewLoaded">
            <summary>
            Determines whether the RTL view is loaded to avoid the LaodMore progress.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.isRTL">
            <summary>
            Determines whether the flowdirection is RTL or not.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.IsViewLoaded">
            <summary>
            Determines whether ListView is loaded into view or not. (i.e., It will becomes true, once OnSizeAllocated is called.)
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.IsLoadedEventFired">
            <summary>
            Determines whether the loaded event is fired or not. (To avoid triggering of Loaded event multiple times when Layout is called).
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.autoScroller">
            <summary>
            It's used to get or set the instance of <see cref="P:Syncfusion.ListView.XForms.SfListView.AutoScroller"/> and avoid to suppress the stylecop error.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.scrollableContentSize">
            <summary>
            It's used to get or set scrollable content size of the control
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.parallaxScrollingEventArgs">
            <summary>
            It's used to get or set scroll x and scroll y values of the control while scrolling
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> class.
            </summary>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.ItemTapped">
            <summary>
            Occurs when an item is tapped.
            </summary>
            <example>
            The following example demonstrates how to wire a tapped event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.ItemTapped += ListView_ItemTapped;
            <para></para>
            private void ListView_ItemTapped(object sender, ItemTappedEventArgs e)
            {
                viewModel.InboxInfo.Remove(e.ItemData as ListViewInboxInfo);
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.ItemDoubleTapped">
            <summary>
            Occurs when an item is double tapped.
            </summary>
            <example>
            The following example demonstrates how to wire a double tapped event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.ItemDoubleTapped += ListView_ItemDoubleTapped;
            <para></para>
            private void ListView_ItemDoubleTapped(object sender, ItemDoubleTappedEventArgs e)
            {
              var listViewInboxInfo = new ListViewInboxInfo();
              listViewInboxInfo.Title = "Bryce Thomas";
              listViewInboxInfo.Subject = "Congratulations on the move!";
              viewModel.InboxInfo.Add(listViewInboxInfo);
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.ItemHolding">
            <summary>
            Occurs when an item is long pressed.
            </summary>
            <example>
            The following example demonstrates how to wire a holding event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.ItemHolding += ListView_ItemHolding;
            <para></para>
            private void ListView_ItemHolding(object sender, ItemHoldingEventArgs e)
            {
               if (e.ItemData == viewModel.InboxInfo[0])
                   viewModel.InboxInfo.Remove(e.ItemData as ListViewInboxInfo);
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.ItemAppearing">
             <summary>
             Occurs when the visual representation of a <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> is being added to the <see cref="P:Syncfusion.ListView.XForms.SfListView.VisualContainer"/>.
             </summary>
             <remarks>
             The <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemAppearing"/> event is raised when the items are appearing in the view on scrolling, loading, and navigating from one page to another page.
             </remarks>
             <example>
             The following example demonstrates how to wire an item appearing event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
             <code>
             listView.ItemAppearing += listView_ItemAppearing;
             <para></para>
             private void listView_ItemAppearing(object sender, ItemAppearingEventArgs e)
             {
                if (e.ItemData == viewModel.BookInfo[0])
                    Debug.WriteLine((e.ItemData as BookInfo).BookName);
            
                // If the ItemData value is "Header", then it's a header item.
                if (e.ItemData == "Header")
                    Debug.WriteLine("Header is Appeared");
             }
             </code>
             </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.ItemDisappearing">
             <summary>
             Occurs when the visual representation of a <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> is being removed from the <see cref="P:Syncfusion.ListView.XForms.SfListView.VisualContainer"/>.
             </summary>
             <remarks>
             The <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemDisappearing"/> event is raised when the items disappearing in the view on scrolling, disposing, and navigating from one page to another page.
             </remarks>
             <example>
             The following example demonstrates how to wire an item disappearing event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
             <code>
             listView.ItemDisappearing += listView_ItemDisappearing;
             <para></para>
             private void listView_ItemDisappearing(object sender, ItemDisappearingEventArgs e)
             {
                if (e.ItemData == viewModel.BookInfo[0])
                    Debug.WriteLine((e.ItemData as BookInfo).BookName);
            
                // If the ItemData value is "Footer" then it's a Footer item.
                if (e.ItemData == "Footer")
                    Debug.WriteLine("Footer is Disappeared");
             }
             </code>
             </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.SelectionChanged">
            <summary>
            Occurs once the selection process has been completed for selected item in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <example>
            The following example demonstrates how to wire the selection changed event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.SelectionChanged += ListView_OnSelectionChanged;  
            <para></para>
            private void ListView_OnSelectionChanged(object sender, ItemSelectionChangedEventArgs e)
            {
               listView.SelectedItems.Clear();
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.SelectionChanging">
            <summary>
            Occurs when selecting an item at the execution time.
            </summary>
            <remarks>
            The <see cref="E:Syncfusion.ListView.XForms.SfListView.SelectionChanging"/> event is a cancelable event and can be canceled by handling the event and setting the Cancel property to true. 
            However, if the event is canceled, the selection process for the selected <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> gets cancelled.
            </remarks>
            <example>
            The following example demonstrates how to wire the selection changing event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.SelectionChanging += ListView_SelectionChanging;  
            <para></para>
            private void ListView_SelectionChanging(object sender, ItemSelectionChangingEventArgs e)
            {
               if (e.AddedItems[0] == ViewModel.Items[0])
                   e.Cancel = true;
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.GroupExpanding">
            <summary>
            Occurs when a group is being expanded.
            </summary>
            <remarks>
            The <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanding"/> event is a cancelable event and can be canceled by handling the event and setting the Cancel property to true. 
            However, if the event is canceled, the group expanding process for the tapped <see cref="T:Syncfusion.ListView.XForms.GroupHeaderItem"/> gets cancelled. 
            Also, we can customize the group being expanded through <see cref="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventArgs"/> event argument.
            </remarks>
            <example>
            The following example demonstrates how to wire the group expanding event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.GroupExpanding += ListView_GroupExpanding;
            <para></para>
            private void ListView_GroupExpanding(object sender, GroupExpandCollapseChangingEventArgs e)
            {
               if (e.Groups[0] == listView.DataSource.Groups[0])
                   e.Cancel = true;
            }
            </code>
            </example>
            <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanded"/>
            <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsing"/>
            <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsed"/>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsing">
            <summary>
            Occurs when a group is being collapsed. 
            </summary>
            <remarks>
            The <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsing"/> event is a cancelable event and can be canceled by handling the event and setting the Cancel property to true. 
            However, if the event is canceled, the group collapsing process for the tapped <see cref="T:Syncfusion.ListView.XForms.GroupHeaderItem"/> gets cancelled. 
            Also, we can customize the group being collapsed through <see cref="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventArgs"/> event argument.
            </remarks>
            <example>
            The following example demonstrates how to wire the group collapsing event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.GroupCollapsing += ListView_GroupCollapsing;
            <para></para>
            private void ListView_GroupCollapsing(object sender, GroupExpandCollapseChangingEventArgs e)
            {
               if (e.Groups[0] == listView.DataSource.Groups[0])
                   e.Cancel = true;
            }
            </code>
            </example>
            <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsed"/>
            <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanding"/>
            <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanded"/>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.GroupExpanded">
             <summary>
             Occurs when a group is expanded. 
             </summary>
             <remarks>
             This event occurs after the <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanding"/> event if that event is not canceled. 
             </remarks>
             <example>
             The following example demonstrates how to wire the group expanded event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
             <code>
             listView.GroupExpanded += ListView_GroupExpanded;
             <para></para>
             private void ListView_GroupExpanded(object sender, GroupExpandCollapseChangingEventArgs e)
             {
            
             }
             </code>
             </example>
             <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanding"/>
             <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsing"/>
             <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsed"/>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsed">
             <summary>
             Occurs when a group is collapsed. 
             </summary>
             <remarks>
             This event occurs after the <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsing"/> event if that event is not canceled.
             </remarks>
             <example>
             The following example demonstrates how to wire the group collapsed event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
             <code>
             listView.GroupCollapsed += ListView_GroupCollapsed;
             <para></para>
             private void ListView_GroupCollapsed(object sender, GroupExpandCollapseChangingEventArgs e)
             {
            
             }
             </code>
             </example>
             <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsing"/>
             <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanding"/>
             <seealso cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanded"/>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.SwipeStarted">
            <summary>
            Occurs when the swipe offset changes from its initial value.
            </summary>
            <remarks>
            The <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeStarted"/> event is a cancelable event and can be canceled by handling the event and setting the Cancel property to true. 
            However, if the event is canceled, the swipe action for that particular item gets cancelled. 
            </remarks>
            <example>
            The following example demonstrates how to wire the swipe started event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.SwipeStarted += ListView_SwipeStarted;
            <para></para>
            private void ListView_SwipeStarted(object sender, SwipeStartedEventArgs e)
            {
               if (e.ItemIndex == 1)
                   e.Cancel = true;
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.Swiping">
            <summary>
            Occurs when swiping an item is being progress.
            </summary>
            <remarks>
            The <see cref="E:Syncfusion.ListView.XForms.SfListView.Swiping"/> event can be handled by defining the Handled property in the <see cref="T:Syncfusion.ListView.XForms.SwipingEventArgs"/> argument to true which holds the current swipe offset value for the swiped item until the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeEnded"/> event is raised.
            </remarks>
            <example>
            The following example demonstrates how to wire the swiping event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.Swiping += ListView_Swiping;
            <para></para>
            private void ListView_Swiping(object sender, SwipingEventArgs e)
            {
               if (e.ItemIndex == 1)
                   e.Handled = true;
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.SwipeEnded">
            <summary>
            Occurs when the swipe action is completed for an item.
            </summary>
            <example>
            The following example demonstrates how to wire the swipe ended event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.SwipeEnded += ListView_SwipeEnded;
            <para></para>
            private void ListView_SwipeEnded(object sender, SwipeEndedEventArgs e)
            {
               if (e.SwipeOffset > 70)
                   listView.ResetSwipe();
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.SwipeReset">
            <summary>
            Occurs when the swiped item gets reset.
            </summary>
            <remarks>
            The <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeReset"/> action can be canceled by setting the Cancel property of the <see cref="T:Syncfusion.ListView.XForms.ResetSwipeEventArgs"/> to true.
            </remarks>
            <example>
            The following example demonstrates how to wire the swipe reset event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.SwipeReset += ListView_SwipeReset;
            <para></para>
            private void ListView_SwipeReset(object sender, ResetSwipeEventArgs e)
            {
               if (e.ItemIndex == 1)
                   e.Cancel = true;
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.QueryItemSize">
            <summary>
            Occurs whenever an item comes into view and query the item size.
            </summary>
            <remarks>
            We can define whether the specified size can be set to the item or not by handling the <see cref="E:Syncfusion.ListView.XForms.SfListView.QueryItemSize"/> event. When the Handled property in the <see cref="T:Syncfusion.ListView.XForms.QueryItemSizeEventArgs"/> argument is false, the decided size will not be set to the item.
            </remarks>
            <example>
            The following example demonstrates how to wire the <see cref="E:Syncfusion.ListView.XForms.SfListView.QueryItemSize"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.QueryItemSize += ListView_QueryItemSize;
            <para></para>
            private void ListView_QueryItemSize(object sender, QueryItemSizeEventArgs e)
            {
               if (e.ItemIndex == 1)
               {
                   e.ItemSize = 300;
                   e.Handled = true;
               }
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.ItemDragging">
            <summary>
            This event occurs while perform the item drag and drop operation and denotes the drag action by <see cref="T:Syncfusion.ListView.XForms.DragAction"/>.
            </summary>
            <example>
            <code>
            The following example demonstrates how to wire the <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemDragging"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            
            listView.ItemDragging += ListView_ItemDragging;
            
            private void ListView_ItemDragging(object sender, ItemDraggingEventArgs e)
            {
                // Disable the dragging for 4th item.
                if (e.NewIndex == 3)
                    e.Cancel = true;
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.ScrollStateChanged">
            <summary>
            Occurs when the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>'s scrolling state changed.
            </summary>
            <remarks>
            For horizontal orientation, it works only from Android API level 23.
            </remarks>
            <example>
            The following example demonstrates how to wire the <see cref="E:Syncfusion.ListView.XForms.SfListView.ScrollStateChanged"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.ScrollStateChanged += ListView_ScrollStateChanged;
            <para></para>
            private void ListView_ScrollStateChanged(object sender, ScrollStateChangedEventArgs e)
            {
                if (e.ScrollState == ScrollState.Idle)
                    DisplayAlert("ScrollState", "Scrolling has stopped", "OK");
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.Loaded">
            <summary>
            Occurs when a <see cref="T:Syncfusion.ListView.XForms.SfListView"/> is loaded for the first time.
            </summary>
            <remarks>
            This event occurs only once when a <see cref="T:Syncfusion.ListView.XForms.SfListView"/> is loaded in view for the first time. 
            Any properties set in this event call back will lead to an additional refresh call when the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> is loaded.
            </remarks>
            <example>
            The following example demonstrates how to wire the <see cref="E:Syncfusion.ListView.XForms.SfListView.Loaded"/> event in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            <code>
            listView.Loaded += ListView_Loaded;
            <para></para>
            private void ListView_Loaded(object sender, ListViewLoadedEventArgs e)
            {
               listView.SelectedItems.Add(viewModel.Customers[2]);
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.Syncfusion#XForms#ParallaxView#IParallaxView#Scrolling">
            <summary>
            Occurs when the user scrolls the control.
            </summary>
        </member>
        <member name="E:Syncfusion.ListView.XForms.SfListView.Scrolling">
            <summary>
            Event is raised whenever the user scrolls the control.This event is provided to give support for parallax scrolling with parallax view.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.SfListView.actualVisual">
            <summary>
            Backing field for material design.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.ActualVisual">
            <summary>
            Used to find the <see cref="P:Xamarin.Forms.VisualMarker.Material"/> for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.Syncfusion#XForms#ParallaxView#IParallaxView#ScrollableContentSize">
            <summary>
            Gets or sets a value of total scrollable size of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.ItemsSource">
            <summary>
            Gets or sets the source items to template and display in <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.ItemsSource = viewModel.BookInfo;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.ItemSize">
            <summary>
            Gets or sets the height (for vertical orientation) or width (for horizontal orientation) of the item. The default value is 40d.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.ItemSize = 70;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.HeaderSize">
            <summary>
            Gets or sets the height (for vertical orientation) or width (for horizontal orientation) of the header. The default value is 40d.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.HeaderSize = 70;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.FooterSize">
            <summary>
            Gets or sets the height (for vertical orientation) or width (for horizontal orientation) of the footer. The default value is 40d.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.FooterSize = 70;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.GroupHeaderSize">
            <summary>
            Gets or sets the height (for vertical orientation) or width (for horizontal orientation) of the group header. The default value is 40d.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.GroupHeaderSize = 70;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.LayoutManager">
            <summary>
            Gets or sets the layout definition for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>. The default layout is <see cref="T:Syncfusion.ListView.XForms.LinearLayout"/>.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.ListView.XForms.LinearLayout"/> will arrange the items in a single column and the <see cref="T:Syncfusion.ListView.XForms.GridLayout"/> will arrange the items in a predefined number of columns.
            </remarks>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.LayoutManager = new LinearLayout();
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.ItemTemplate">
             <summary>
             Gets or sets the data template for <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
             </summary>
             <example>
             <code>
             SfListView listView = new SfListView
             {
                ItemsSource = bookInfo,
             <para></para>
                // Define the template for displaying each item
                ItemTemplate = new DataTemplate(() =>
                {
                   // Create a view with bindings for displaying each property.
                   Label bookNameLabel = new Label() { FontSize = 18};
                   bookNameLabel.SetBinding(Label.TextProperty, "BookName");
            <para></para>
                   Label bookAuthorLabel = new Label() { FontSize = 12 };
                   bookAuthorLabel.SetBinding(Label.TextProperty, "BookAuthor");
            <para></para>
                   // returns a ViewCell.
                   return new ViewCell
                   {
                     View = new StackLayout
                     {
                        Children = 
                        {
                              bookNameLabel,
                              bookAuthorLabel
                            }
                     }
                   };    
                })
             };
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.HeaderTemplate">
             <summary>
             Gets or sets a header template for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
             </summary>
             <example>
             <code>
             SfListView listView = new SfListView();
             listView.ItemsSource = viewModel.InboxInfo;
             listView.HeaderTemplate = new DataTemplate(() =>
             {
                var grid = new Grid();
                grid.BackgroundColor = Color.FromHex("#4CA1FE");
                var headerLabel = new Label
                {
                    BackgroundColor = Color.White,
                    FontSize = 18,
                    FontAttributes = FontAttributes.Bold,
                    Text = "Inbox"
                };
            
                grid.Children.Add(headerLabel);
            
                return grid;
             });
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.FooterTemplate">
             <summary>
             Gets or sets the footer template for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
             </summary>
             <example>
             <code>
             SfListView listView = new SfListView();
             listView.ItemsSource = viewModel.InboxInfo;
             listView.FooterTemplate = new DataTemplate(() =>
             {
                var grid = new Grid();
                grid.BackgroundColor = Color.FromHex("#4CA1FE");
                var footerLabel = new Label
                {
                    BackgroundColor = Color.White,
                    FontSize = 18,
                    FontAttributes = FontAttributes.Bold,
                    Text = "Footer"
                };
            
                grid.Children.Add(footerLabel);
            
                return grid;
             });
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.SelectedItemTemplate">
             <summary>
             Gets or sets the selected item template for selection.
             </summary>
             <example>
             <code>
             SfListView listView = new SfListView();
             listView.ItemsSource = viewModel.BookInfo;
             listView.SelectedItemTemplate = new DataTemplate(() =>
             {
                var grid = new Grid();
                grid.BackgroundColor = Color.FromHex("#4CA1FE");
                var bookNameLabel = new Label
                {
                    BackgroundColor = Color.White,
                    FontSize = 18,
                    FontAttributes = FontAttributes.Bold,
                };
                bookNameLabel.SetBinding(Label.TextProperty, "BookName");
                grid.Children.Add(footerLabel);
            
                return grid;
             });
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.LoadMoreTemplate">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.DataTemplate"/> which will be loaded as a <see cref="T:Syncfusion.ListView.XForms.LoadMoreItem"/>. If it is null, the default load more view will be loaded.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.ItemsSource = viewModel.BookInfo;
            listView.LoadMoreTemplate = new DataTemplate(() =>
            {
               var grid = new Grid();
               var label = new Label
               {
                   Text = "Load More Items...",
                   FontSize = 20,
                   BackgroundColor = Color.AliceBlue,
                   HorizontalTextAlignment = TextAlignment.Center,
                   VerticalTextAlignment = TextAlignment.Center
               };
               label.SetBinding(Label.IsVisibleProperty, new Binding("IsBusy", BindingMode.Default, new InverseBoolConverter()));
               grid.Children.Add(label);
               return grid;
            });
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.LoadMoreCommand">
             <summary>
             Gets or sets <see cref="T:System.Windows.Input.ICommand"/> which will be executed when load more operation is triggered.
             </summary>
             <example>
             <code lang="C#">
             <![CDATA[        
             SfListView listView = new SfListView();
             listView.LoadMoreOption = LoadMoreOption.Manual;
             listView.LoadMoreCommand = viewModel.LoadMoreItemsCommand;
             listView.SetBinding(SfListView.IsBusyProperty, new Binding("IsBusy"));
            
             //ViewModel.cs
             private bool isBusy;
             public bool IsBusy
             {
                 get { return isBusy; }
                 set
                 {
                     this.isBusy = value;
                     RaisePropertyChanged("IsBusy");
                 }
             }
            
             LoadMoreItemsCommand = new Command<object>(LoadMoreItems, CanLoadMoreItems);
                    
             private bool CanLoadMoreItems(object obj)
             {
                 if (Products.Count >= totalItems)
                     return false;
                 return true;
             }
             
             private async void LoadMoreItems(object obj)
             {
                 var listView = obj as Syncfusion.ListView.XForms.SfListView;
                 IsBusy = true;
                 await Task.Delay(2500);
                 var index = Products.Count;
                 var count = index + 3 >= totalItems ? totalItems - index : 3;
                 AddProducts(index, count);
                 IsBusy = false;
             }
             
             private void AddProducts(int index, int count)
             {
                var name = Names[0];
                var p = new Product()
                {
                    Name = name,
                    Weight = Weights[0],
                    Price = Prices[0]
                };
             
                Products.Add(p);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.HoldCommand">
             <summary>
             Gets or sets <see cref="T:System.Windows.Input.ICommand"/> which will be executed when hold on the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
             </summary>
             <example>
             <code lang="C#">
             <![CDATA[   
             SfListView listView = new SfListView();
             listView.HoldCommand = viewModel.HoldCommand;
             public class CommandViewModel
             {
               private Command<Object> holdingCommand;
            
               public Command<object> HoldingCommand
               {
                   get { return holdingCommand; }
                   set { holdingCommand = value; }
               }
            
               public CommandViewModel()
               {
                   HoldingCommand = new Command<object>(HoldingCommandMethod);
               }
            
               private void HoldingCommandMethod(object obj)
               {
                   if ((obj as Syncfusion.ListView.XForms.ItemHoldingEventArgs).ItemData == viewModel.InboxInfo[3])
                       viewModel.InboxInfo.Remove(e.ItemData as ListViewInboxInfo);
               }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.HoldCommandParameter">
            <summary>
            Gets or sets the parameter for <see cref="P:Syncfusion.ListView.XForms.SfListView.HoldCommand"/>.
            </summary>
            <remarks>The default value is <see cref="T:Syncfusion.ListView.XForms.ItemHoldingEventArgs"/></remarks>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.TapCommand">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Input.ICommand"/> which will be executed when tapping the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <example>
            <code lang="C#">
            <![CDATA[   
            SfListView listView = new SfListView();
            listView.TapCommand = viewModel.TappedCommand;
            
            public class CommandViewModel
            {
              private Command<Object> tappedCommand;
              
              public Command<object> TappedCommand
              {
                  get { return tappedCommand; }
                  set { tappedCommand = value; }
              }
              
              public CommandViewModel()
              {
                  TappedCommand = new Command<object>(TappedCommandMethod);
              }
              
              private void TappedCommandMethod(object obj)
              {
                  if ((obj as Syncfusion.ListView.XForms.ItemTappedEventArgs).ItemData == viewModel.InboxInfo[0])
                      viewModel.InboxInfo.Remove(e.ItemData as ListViewInboxInfo)
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.TapCommandParameter">
            <summary>
            Gets or sets the parameter for <see cref="P:Syncfusion.ListView.XForms.SfListView.TapCommand"/>.
            </summary>
            <remarks>The default value is <see cref="T:Syncfusion.ListView.XForms.ItemTappedEventArgs"/></remarks>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.LoadMoreCommandParameter">
             <summary>
             Gets or sets the parameter for <see cref="P:Syncfusion.ListView.XForms.SfListView.LoadMoreCommand"/>.
             </summary>
             <example>
             <code lang="C#">
             <![CDATA[   
             SfListView listView = new SfListView();
             listView.LoadMoreOption = LoadMoreOption.Manual;
             listView.LoadMoreCommand = viewModel.LoadMoreItemsCommand;
             listView.SetBinding(SfListView.IsBusyProperty, new Binding("IsBusy"));
            
             //ViewModel.cs
             private bool isBusy;
             public bool IsBusy
             {
                 get { return isBusy; }
                 set
                 {
                     this.isBusy = value;
                     RaisePropertyChanged("IsBusy");
                 }
             }
            
             LoadMoreItemsCommand = new Command<object>(LoadMoreItems, CanLoadMoreItems);
                    
             private bool CanLoadMoreItems(object obj)
             {
                 if (Products.Count >= totalItems)
                     return false;
                 return true;
             }
             
             private async void LoadMoreItems(object obj)
             {
                 var listView = obj as Syncfusion.ListView.XForms.SfListView;
                 IsBusy = true;
                 await Task.Delay(2500);
                 var index = Products.Count;
                 var count = index + 3 >= totalItems ? totalItems - index : 3;
                 AddProducts(index, count);
                 IsBusy = false;
             }
             
             private void AddProducts(int index, int count)
             {
                var name = Names[0];
                var p = new Product()
                {
                    Name = name,
                    Weight = Weights[0],
                    Price = Prices[0],
                    Image = ImageSource.FromResource("LoadMoreUG.LoadMore." + name.Replace(" ", string.Empty) + ".jpg")
                };
             
                Products.Add(p);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.LoadMoreOption">
            <summary>
            Gets or sets the option which determines the behavior of load more items.
            If it is <see cref="F:Syncfusion.ListView.XForms.LoadMoreOption.None"/>, load more support will not be enabled. This is the default value. <br/>
            If it is <see cref="F:Syncfusion.ListView.XForms.LoadMoreOption.Auto"/>, automatically execute the <see cref="P:Syncfusion.ListView.XForms.SfListView.LoadMoreCommand"/> 
            when list view reaches the scroll end. <br/>
            If it is <see cref="F:Syncfusion.ListView.XForms.LoadMoreOption.Manual"/>, displays load more button when end reached and execute the <see cref="P:Syncfusion.ListView.XForms.SfListView.LoadMoreCommand"/> when tap on button.
            For <see cref="F:Syncfusion.ListView.XForms.Orientation.Horizontal"/>, <see cref="F:Syncfusion.ListView.XForms.LoadMoreOption.Manual"/> is not supported.
            For <see cref="F:Syncfusion.ListView.XForms.LoadMorePosition.Top"/>, <see cref="F:Syncfusion.ListView.XForms.LoadMoreOption.Auto"/> is not supported.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.LoadMoreOption = LoadMoreOption.Manual;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.LoadMorePosition">
            <summary>
            Gets or sets the position which determines where the load more item should be positioned.
            If it is <see cref="F:Syncfusion.ListView.XForms.LoadMorePosition.Top"/>, load more item will be added on the top of the list. <br/>
            If it is <see cref="F:Syncfusion.ListView.XForms.LoadMorePosition.Top"/> and <see cref="F:Syncfusion.ListView.XForms.Orientation.Horizontal"/>, the load more item will be in the left corner of the list.
            If it is <see cref="F:Syncfusion.ListView.XForms.LoadMorePosition.Bottom"/>, the load more item will be added at the bottom of the list. This is the default value. <br/>
            If it is <see cref="F:Syncfusion.ListView.XForms.LoadMorePosition.Bottom"/> and <see cref="F:Syncfusion.ListView.XForms.Orientation.Horizontal"/>, the load more item will be in the right corner of the list. 
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.LoadMorePosition = LoadMorePosition.Top;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.IsBusy">
             <summary>
             Gets or sets a value indicating whether list view is busy in loading more items. If it is true, the load more indicator will be displayed until it sets to false.
             </summary>
             <example>
             <code lang="C#">
             <![CDATA[   
             SfListView listView = new SfListView();
             listView.LoadMoreOption = LoadMoreOption.Manual;
             listView.LoadMoreCommand = viewModel.LoadMoreItemsCommand;
             listView.SetBinding(SfListView.IsBusyProperty, new Binding("IsBusy"));
            
             //ViewModel.cs
             private bool isBusy;
             public bool IsBusy
             {
                 get { return isBusy; }
                 set
                 {
                     this.isBusy = value;
                     RaisePropertyChanged("IsBusy");
                 }
             }
            
             LoadMoreItemsCommand = new Command<object>(LoadMoreItems, CanLoadMoreItems);
                    
             private bool CanLoadMoreItems(object obj)
             {
                 if (Products.Count >= totalItems)
                     return false;
                 return true;
             }
             
             private async void LoadMoreItems(object obj)
             {
                 var listView = obj as Syncfusion.ListView.XForms.SfListView;
                 IsBusy = true;
                 await Task.Delay(2500);
                 var index = Products.Count;
                 var count = index + 3 >= totalItems ? totalItems - index : 3;
                 AddProducts(index, count);
                 IsBusy = false;
             }
             
             private void AddProducts(int index, int count)
             {
                var name = Names[0];
                var p = new Product()
                {
                    Name = name,
                    Weight = Weights[0],
                    Price = Prices[0],
                    Image = ImageSource.FromResource("LoadMoreUG.LoadMore." + name.Replace(" ", string.Empty) + ".jpg")
                };
             
                Products.Add(p);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.GroupHeaderTemplate">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.DataTemplate"/> for the group headers of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.GroupHeaderTemplate = new DataTemplate(() =>
            {
               var grid = new Grid();
               
               var label1 = new Label();
               label1.SetBinding(Label.TextProperty, new Binding("Key"));
                    
               var label2 = new Label();
               Binding binding = new Binding("Items");
               binding.Converter = new Converter();
               label2.SetBinding(Label.TextProperty, binding);
                    
               grid.Children.Add(label1);
               grid.Children.Add(label2, 1, 0);
               
               return grid;
            });
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.IsStickyHeader">
            <summary>
            Gets or sets a value indicating whether to display the sticky header or scrollable header.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.IsStickyHeader = true;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.IsStickyFooter">
            <summary>
            Gets or sets a value indicating whether to display the sticky footer or scrollable footer.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.IsStickyFooter = true;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.StickyFooterPosition">
            <summary>
            Gets or sets a value indicating whether to display the sticky footer inside the body of the ListView when items are less than the body size.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.StickyFooterPosition = FooterPosition.Default;
            </code>
            </example>
            <remarks>
            This API is applicable when <see cref="P:Syncfusion.ListView.XForms.SfListView.IsStickyFooter"/> is enabled.
            If the value is 'Default', it will be placed at the end of the ListView and if the value is 'Body', it will be placed inside the body of the ListView when items are less than the body size.
            </remarks>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.IsStickyGroupHeader">
            <summary>
            Gets or sets a value indicating whether to display the sticky group header or scrollable group header.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.IsStickyGroupHeader = true;
            </code>
            </example>
            <remarks>
            If true and <see cref="P:Syncfusion.ListView.XForms.SfListView.AutoFitMode"/> is 'Height' or 'DynamicHeight', sticky group header panning experience will not be smooth or item's layout won't work as expected. You can enable smooth experience, Set same size for all group header items by handling the <see cref="E:Syncfusion.ListView.XForms.SfListView.QueryItemSize"/> event.
            </remarks>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.AllowGroupExpandCollapse">
            <summary>
            Gets or sets a value indicating whether to allow expanding and collapsing of groups for <see cref="T:Syncfusion.ListView.XForms.GroupHeaderItem"/>.
            </summary>
            <value><b>true</b> If allow expand and collapse groups; otherwise, <b>false</b>.</value>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.AllowGroupExpandCollapse = true;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.DataSource">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.DataSource.DataSource"/> for data operations like sorting, filtering, and grouping. 
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            
            DataSource dataSource = new DataSource();
            dataSource.SortDescriptors.Add(new SortDescriptor()
            {
              PropertyName = "ContactName",
              Direction = ListSortDirection.Ascending,
            }); 
            dataSource.Source = ViewModel.BookInfo;
            
            listView.DataSource = dataSource;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.ItemSpacing">
            <summary>
            Gets or sets the item spacing between the items.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.ItemSpacing = new Thickness(0, 5, 5, 0);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.AllowKeyboardNavigation">
            <summary>
            Gets or sets a value indicating whether to allow navigating through keyboard buttons.
            </summary>
            <value><b>true</b> If allows keyboard navigation; otherwise, <b>false</b>.</value>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.AllowKeyboardNavigation = true;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.SelectionGesture">
            <summary>
            Gets or sets the selection gesture for selection.
            </summary>
            <remarks>
            By default value, the SelectionGesture is TouchGesture.Tap.
            </remarks>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.SelectionGesture = TouchGesture.Hold;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.SelectionMode">
            <summary>
            Gets or sets the selection mode for selection.
            </summary>
            <remarks>
            By default value, the SelectionMode is SelectionMode.Single.
            </remarks>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.SelectionMode = SelectionMode.SingleDeselect;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.SelectedItems">
             <summary>
             Gets the selected items for selection.
             </summary>
             <example>
             <code lang="C#">
             <![CDATA[   
             SfListView listView = new SfListView();
             listView.SelectionMode = SelectionMode.Multiple;
             listView.SelectedItems = viewModel.SelectedItems;
            
             //ViewModel
             private ObservableCollection<object> selectedItems; 
             public ObservableCollection<object> SelectedItems
             {
                 get
                 {
                     return selectedItems;
                 }
                 set
                 {
                     if (value != selectedItems && ListSelectionMode == SelectionMode.Multiple)
                     {
                         selectedItems = value;
                     }
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.CurrentItem">
            <summary>
            Gets or sets the current selected item.
            </summary>
            <value>The current item.
            </value>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.CurrentItem = viewModel.BookInfo[2];
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.SelectedItem">
            <summary>
            Gets or sets the first selected item.
            </summary>
            <value>The selected item.
            </value>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.SelectedItem = viewModel.BookInfo[2];
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.SelectionBackgroundColor">
            <summary>
            Gets or sets the selection background color for the selected item.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.SelectionBackgroundColor = Color.Green;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.Orientation">
            <summary>
            Gets or sets the orientation for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>. The default orientation is vertical.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.Orientation = Orientation.Horizontal;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.SwipeOffset">
            <summary>
            Gets or sets the value how much the swiped item will be moved to the side and stick there. The default value is 100.
            </summary>
            <value>
            The swipe offset value.
            </value>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.AllowSwiping = true;
            listView.SwipeOffset = 60;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.SwipeThreshold">
            <summary>
            Gets or sets the value that indicates <see cref="T:Syncfusion.ListView.XForms.SwipeView"/> gets stick when <see cref="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.SwipeOffset"/> is greater than half of the <see cref="P:Syncfusion.ListView.XForms.SfListView.SwipeThreshold"/> value. The default value is 0.
            </summary>
            <value>
            The swipe threshold value.
            </value>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.AllowSwiping = true;
            listView.SwipeOffset = 60;
            listView.SwipeThreshold = 30;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.AllowSwiping">
            <summary>
            Gets or sets a value indicating whether to enable swiping or not.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.AllowSwiping = true;
            listView.SwipeOffset = 60;
            listView.SwipeThreshold = 30;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.LeftSwipeTemplate">
            <summary>
            Gets or sets the template that is used to display when <see cref="T:Syncfusion.ListView.XForms.SwipeDirection"/> is <see cref="F:Syncfusion.ListView.XForms.SwipeDirection.Left"/> and <see cref="F:Syncfusion.ListView.XForms.SwipeDirection.Bottom"/>.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.AllowSwiping = true;
            listView.SwipeOffset = 60;
            listView.SwipeThreshold = 30;
            listView.LeftSwipeTemplate = new DataTemplate(() =>
            {
               var grid = new Grid();
               
               var grid1 = new Grid()
               {
                   BackgroundColor = Color.FromHex("#009EDA"),
                   HorizontalOptions = LayoutOptions.Fill,
                   VerticalOptions = LayoutOptions.Fill
               };
               var favoriteGrid = new Grid() { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center };
               var favoriteImage = new Image() { BackgroundColor = Color.Transparent, HeightRequest = 35, WidthRequest = 35 };
               favoriteImage.Source = ImageSource.FromResource("Swiping.Images.Favorites.png");
               favoriteGrid.Children.Add(favoriteImage);
               grid1.Children.Add(favoriteGrid);
               
               grid.Children.Add(grid1);
               
               return grid;
                
            });
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.RightSwipeTemplate">
            <summary>
            Gets or sets the template that is used to display when <see cref="T:Syncfusion.ListView.XForms.SwipeDirection"/> is <see cref="F:Syncfusion.ListView.XForms.SwipeDirection.Right"/> and <see cref="F:Syncfusion.ListView.XForms.SwipeDirection.Top"/>.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.AllowSwiping = true;
            listView.SwipeOffset = 60;
            listView.SwipeThreshold = 30;
            listView.RightSwipeTemplate = new DataTemplate(() =>
            {
               var grid = new Grid();
               
               var grid1 = new Grid()
               {
                   BackgroundColor = Color.FromHex("#009EDA"),
                   HorizontalOptions = LayoutOptions.Fill,
                   VerticalOptions = LayoutOptions.Fill
               };
               var favoriteGrid = new Grid() { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center };
               var favoriteImage = new Image() { BackgroundColor = Color.Transparent, HeightRequest = 35, WidthRequest = 35 };
               favoriteImage.Source = ImageSource.FromResource("Swiping.Images.Favorites.png");
               favoriteGrid.Children.Add(favoriteImage);
               grid1.Children.Add(favoriteGrid);
               
               grid.Children.Add(grid1);
               
               return grid;
                
            });
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.IsScrollBarVisible">
            <summary>
            Gets or sets a value indicating whether to display the scrollbar or not.
            </summary>
            <remarks>ScrollBar cannot be updated at runtime.</remarks>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.IsScrollBarVisible = true;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.AutoFitMode">
            <summary>
            Gets or sets the value that indicates whether <see cref="T:Syncfusion.ListView.XForms.SfListView"/> will <see cref="P:Syncfusion.ListView.XForms.SfListView.AutoFitMode"/> the items based on its content.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.AutoFitMode = AutoFitMode.Height;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.FocusBorderColor">
            <summary>
            Gets or sets the border color for the current focused item.
            </summary>
            <remarks>For Android and iOS platform, the default color is <see cref="F:Xamarin.Forms.Color.Transparent"/> and for macOS and UWP platform, the default color is <see cref="F:Xamarin.Forms.Color.Blue"/>.
            </remarks>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.FocusBorderColor = new Color.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.FocusBorderThickness">
            <summary>
            Gets or sets the border thickness for the current focused item.
            </summary>
            <remarks>For Android and iOS platform, the default thickness is 0 and for macOS and UWP platform, the default thickness is 1.
            </remarks>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.FocusBorderThickness = new Thickness(0, 5, 5, 0);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.DragStartMode">
            <summary>
            Gets or sets a value indicating whether to allow reordering the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> by drag and drop.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.DragStartMode = DragStartMode.OnHold;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.DragItemTemplate">
            <summary>
            Gets or sets the template that is used to display when dragging the item.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.DragStartMode = DragStartMode.OnHold;
            listView.DragItemTemplate = new DataTemplate(() => 
            {
                var grid = new Grid();
                var name = new Label { FontSize = 15 };
                name.SetBinding(Label.TextProperty, new Binding("Name"));
                grid.Children.Add(name);
                return grid;
            });
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.IsScrollingEnabled">
            <summary>
            Gets or sets a value indicating whether the scroling is enable or disabled for listview.
            </summary>
            <remarks>
            if <see cref="P:Syncfusion.ListView.XForms.SfListView.IsScrollingEnabled"/> is <b>false</b> then ListView will be rendering all its content with full height. Therefore, listView content will not be viewable without external ScrollView if they have content to be loaded that exceeds view size. 
            if <see cref="P:Syncfusion.ListView.XForms.SfListView.IsScrollingEnabled"/> is <b>true</b> then ListView will make its content appropriate to View Size and reuse the items during the scrolling process.
            </remarks>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.DragDropController">
             <summary>
             Gets or sets the <see cref="P:Syncfusion.ListView.XForms.SfListView.DragDropController"/> which controls drag-and-drop and related operations.
             </summary>
             <value>An instance of <see cref="P:Syncfusion.ListView.XForms.SfListView.DragDropController"/></value>
             <example>
             <code lang="C#">
             <![CDATA[   
             SfListView listView = new SfListView();
             listView.DragStartMode = DragStartMode.OnHold;
             this.listView.DragDropController = new DragDropControllerExt(this.listView);
            
             public class DragDropControllerExt : DragDropController
             {
                public DragDropControllerExt(SfListView listView) : base(listView)
                {
            
                }
            
                protected override Task<bool> OnLayoutItem(View element, Rectangle rect)
                {
                    return element.LayoutTo(rect, 250, Easing.BounceIn);
                }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.AutoScroller">
            <summary>
            Gets the value indicating the instance of <see cref="T:Syncfusion.ListView.XForms.AutoScroller"/>.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.DragStartMode = DragStartMode.OnHold;
            this.listView.AutoScroller.Interval = new TimeSpan(0, 0, 0, 0, 200);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.SelectionController">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionController"/> which controls the selection and its related operations.
            </summary>
            <value>An instance of <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionController"/></value>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.SelectionController = new SelectionControllerExt(listView);
            
            public class SelectionControllerExt : SelectionController
            {
                public SelectionControllerExt(SfListView listView) : base(listView)
                {
                }
            
                protected override void AnimateSelectedItem(ListViewItem selectedListViewItem)
                {
                    base.AnimateSelectedItem(selectedListViewItem);
                    selectedListViewItem.Opacity = 0;
                    selectedListViewItem.FadeTo(1, 3000, Easing.SinInOut);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.ItemGenerator">
             <summary>
             Gets or sets the ItemGenerator to create or update a <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
             </summary>
             <example>
             <code>
             SfListView listView = new SfListView();
             listView.ItemGenerator = new ItemGeneratorExt(this.listView);
             
             public class ItemGeneratorExt : ItemGenerator
             {
                 public SfListView listView;
             
                 public ItemGeneratorExt(SfListView listView) : base(listView)
                 {
                     this.listView = listView;
                 }
             
                 protected override ListViewItem OnCreateListViewItem(int itemIndex, ItemType type, object data = null)
                 {
                     if (type == ItemType.Header)
                         return new HeaderItemExt(this.listView);
                     return base.OnCreateListViewItem(itemIndex, type, data);
                 }
             }
             
             public class HeaderItemExt : HeaderItem
             {
                private SfListView listView;
            
                public HeaderItemExt(SfListView listView)
                {
                    this.listView = listView
                }
            
                protected override void OnItemAppearing()
                {
                    base.OnItemAppearing();
                    this.BackgroundColor = Color.Yellow;
                }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.CanCustomizeContentLayout">
            <summary>
            Gets or sets a value indicating whether to bounce <see cref="T:Syncfusion.ListView.XForms.SfListView"/> body region only with TransitionMode-Push.
            </summary>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.CanCustomizeContentLayout = true;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.VisualContainer">
            <summary>
            Gets or sets the VisualContainer.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.ListViewCachingStrategy">
            <summary>
            Gets or sets the ListViewCachingStrategy.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.HeaderItem">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.ListView.XForms.SfListView.HeaderItem"/> for add into the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.FooterItem">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.ListView.XForms.SfListView.FooterItem"/> for add into the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.HasGroups">
            <summary>
            Gets a value indicating whether the <see cref="T:Syncfusion.DataSource.DataSource"/> has groups or not.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.SwipeController">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.ListView.XForms.SfListView.SwipeController"/> which controls the swiping and its related operations.
            </summary>
            <value>An instance of <see cref="P:Syncfusion.ListView.XForms.SfListView.SwipeController"/></value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.DragItemPopupView">
            <summary>
            Gets or sets the drag item popup view for display the drag item.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.IsInPulling">
            <summary>
            Gets or sets a value indicating whether to determines pulling the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> or not.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SfListView.IsInRefreshing">
            <summary>
            Gets or sets a value indicating whether to pull-to-refresh is refreshing or not.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.Dispose">
            <summary>
            Disposes all allocated resources.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.ForceUpdateItemSize(System.Int32)">
            <summary>
            Helper method to refresh a particular item or entire listView items.
            </summary>
            <param name="itemIndex">This is optional parameter. If needs to update particular item, then pass that item's index.
            If needs to update more than one item, then don't pass the parameter. </param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.ScrollTo(System.Double,System.Boolean)">
            <summary>
            Scrolls the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> item into given position.
            </summary>
            <param name="position">The position based on <see cref="P:Syncfusion.ListView.XForms.SfListView.Orientation"/> to scroll.</param>
            <param name="disableAnimation">True to disable scroll animation while changing the view; otherwise, false. The default is false.</param>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.ScrollTo(1000);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.ScrollTo(System.Object,Syncfusion.ListView.XForms.ScrollToPosition,System.Boolean)">
            <summary>
            Scrolls the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> item into given data object.
            </summary>
            <param name="itemData">Represents the data object.</param>
            <param name="scrollToPosition">Defines position in the view to which object is scrolled.</param>
            <param name="disableAnimation">True to disable scroll animation while changing the view; otherwise, false. The default is false.</param>
            <example>
            <code>
            SfListView listView = new SfListView();
            listView.ScrollTo(ViewModel.ContactsInfo[30]);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RefreshView">
            <summary>
            Refreshes the view.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.SelectAll">
            <summary>
            Select all the items in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.CollapseAll">
            <summary>
            Collapses all the groups in <see cref="P:Syncfusion.DataSource.DataSource.Groups"/>.
            </summary>
            <remarks>This method collapse all the groups in <see cref="P:Syncfusion.DataSource.DataSource.Groups"/> programmatically.</remarks>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.ExpandAll">
            <summary>
            Expands all the groups in <see cref="P:Syncfusion.DataSource.DataSource.Groups"/>.
            </summary>
            <remarks>This method expand all the groups in <see cref="P:Syncfusion.DataSource.DataSource.Groups"/> programmatically.</remarks>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.CollapseGroup(Syncfusion.DataSource.Extensions.GroupResult)">
            <summary>
            Collapses the specified group.
            </summary>
            <param name="group">Specifies the <see cref="T:Syncfusion.DataSource.Extensions.GroupResult"/> to collapse it from view.</param>       
            <example><code lang="C#"><![CDATA[        
             var group = (listview.DataSource.Groups[0] as Group);
               this.listview.CollapseGroup(group);
            ]]></code></example>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.ExpandGroup(Syncfusion.DataSource.Extensions.GroupResult)">
            <summary>
            Expands the specified group.
            </summary>
            <param name="group">Specifies the <see cref="T:Syncfusion.DataSource.Extensions.GroupResult"/> to expand it from view.</param>   
            <example><code lang="C#"><![CDATA[        
             var group = (listview.DataSource.Groups[0] as Group);
               this.listview.ExpandGroup(group);
            ]]></code></example>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.ResetSwipe(System.Boolean)">
            <summary>
            Resets the swiping and moves the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> to its default position.
            </summary>
            <param name="canAnimate">Indicates whether animate the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.SwipeItem(System.Object,System.Double)">
            <summary>
            Swipe an item programmatically based on the given offset value.
            </summary>
            <param name="itemData">Represents the item data of list view item.</param>
            <param name="offset">Represents the value that how much the item need to swipe.</param>
            <example>
            <code>
            SfListView listView = new SfListView();
            // LeftSwipe
            listView.SwipeItem(viewModel.BookInfo[3], 500);
            // RightSwipe
            listView.SwipeItem(viewModel.BookInfo[3], -500);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RefreshListViewItem(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Helper method to refresh the particular item, range of items or all the items in the listView and also refresh the template.
            </summary>
            <param name="startRowIndex">Indicates that the start row index to refresh.</param>
            <param name="endRowIndex">Indicates that the end row index to refresh.</param>
            <param name="canReload">Indicates whether to refresh the template or not.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.Pulling(System.Double,System.Object,System.Boolean@)">
            <summary>
            Occurs when the pulling gesture action is started.
            </summary>
            <param name="progress">Indicates the progress indicator value.</param>
            <param name="pullToRefresh">Indicates the pullToRefresh control.</param>
            <param name="cancel">Gets or sets a value indicating whether pulling should be handled.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.Refreshing(System.Object)">
            <summary>
            Occurs when the pulling gesture action is completed.
            </summary>
            <param name="pullToRefresh">Indicates the pullToRefresh control.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.Refreshed(System.Object)">
            <summary>
            Occurs when the view gets refreshed.
            </summary>
            <param name="pullToRefresh">Indicates the pullToRefresh control.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.PullingCancelled(System.Object)">
            <summary>
            Occurs when the pulling is cancelled.
            </summary>
            <param name="pullToRefresh">Indicates the pullToRefresh control.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.CanHandleGesture(System.Object)">
            <summary>
            Checks whether need to handle pulling gesture.
            </summary>
            <returns>If true, handles the pulling action.</returns>
            <param name="pullToRefresh">Indicates the pullToRefresh control.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.Syncfusion#XForms#Themes#IParentThemeElement#GetThemeDictionary">
            <summary>
            Method invoke to get the initial set of color's from theme dictionary.
            </summary>
            <returns>Return the List View theme dictionary</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.Syncfusion#XForms#Themes#IThemeElement#OnControlThemeChanged(System.String,System.String)">
            <summary>
            Method invoke when theme changes are applied for internal properties.
            </summary>
            <param name="oldTheme">Old theme name</param>
            <param name="newTheme">New theme name</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.Syncfusion#XForms#Themes#IThemeElement#OnCommonThemeChanged(System.String,System.String)">
            <summary>
            Method invoke when theme dictionary contains syncfusion theme.
            </summary>
            <param name="oldTheme">Old theme name</param>
            <param name="newTheme">New theme name</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RefreshView(System.Boolean)">
            <summary>
            Refresh the view.
            </summary>
            <param name="canResetRowHeight">Indicates to reset the row height</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnScrollChanged(System.Double,System.Double)">
            <summary>
            Raises the Scrolling event.
            </summary>
            <param name="scrollX">double type.</param>
            <param name="scrollY">type double.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.InitializeDragPopupView">
            <summary>
            Initialize the drag popup view.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseItemTapped(Syncfusion.ListView.XForms.ItemTappedEventArgs)">
            <summary>
            Helper method for raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemTapped"/> event when tapped in the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.ListView.XForms.ItemTappedEventArgs"/></param>
            <returns>Returns the boolean handled value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseItemDoubleTapped(Syncfusion.ListView.XForms.ItemDoubleTappedEventArgs)">
            <summary>
            Helper method for raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemDoubleTapped"/> event when double tapped in the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.ListView.XForms.ItemDoubleTappedEventArgs"/></param>
            <returns>Returns the boolean handled value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseItemHolding(Syncfusion.ListView.XForms.ItemHoldingEventArgs)">
            <summary>
            Helper method for raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemHolding"/> event when hold in the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/>.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.ListView.XForms.ItemHoldingEventArgs"/></param>
            <returns>Returns the boolean handled value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseItemAppearing(Syncfusion.ListView.XForms.ItemAppearingEventArgs)">
            <summary>
            Helper method for raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemAppearing"/> event when item load in the <see cref="P:Syncfusion.ListView.XForms.SfListView.VisualContainer"/>.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.ListView.XForms.ItemAppearingEventArgs"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseItemDisappearing(Syncfusion.ListView.XForms.ItemDisappearingEventArgs)">
            <summary>
            Helper method for raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemDisappearing"/> event when item remove in the <see cref="P:Syncfusion.ListView.XForms.SfListView.VisualContainer"/>.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.ListView.XForms.ItemDisappearingEventArgs"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseSelectionChangingEvent(Syncfusion.ListView.XForms.ItemSelectionChangingEventArgs)">
            <summary>
            Helper method for raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.SelectionChanging"/> event when selection changing.
            </summary>
            <param name="args">The <see cref="T:Syncfusion.ListView.XForms.ItemSelectionChangingEventArgs"/>.</param>
            <returns> <b>true</b>, if selection changing was raised, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseSelectionChangedEvent(Syncfusion.ListView.XForms.ItemSelectionChangedEventArgs)">
            <summary>
            Helper method for raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.SelectionChanged"/> event when selection changed.
            </summary>
            <param name="args">The <see cref="T:Syncfusion.ListView.XForms.ItemSelectionChangedEventArgs"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseGroupExpandingEvent(Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventArgs)">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanding"/> event
            </summary>
            <param name="args">An <see cref="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventArgs">GroupChangingEventArgs</see> that contains the event data.</param>
            <returns>Returns the boolean cancel value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseGroupExpandedEvent(Syncfusion.ListView.XForms.GroupExpandCollapseChangedEventArgs)">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupExpanded"/> event
            </summary>
            <param name="args">An <see cref="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangedEventArgs">GroupChangedEventArgs</see> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseGroupCollapsingEvent(Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventArgs)">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsing"/> event
            </summary>
            <param name="args">An <see cref="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangingEventArgs">GroupChangingEventArgs</see> that contains the event data.</param>
            <returns>Returns the boolean handled value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseGroupCollapsedEvent(Syncfusion.ListView.XForms.GroupExpandCollapseChangedEventArgs)">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.GroupCollapsed"/> event
            </summary>
            <param name="args">An <see cref="T:Syncfusion.ListView.XForms.GroupExpandCollapseChangedEventArgs">GroupChangedEventArgs</see> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseSwipeStartedEvent(Syncfusion.ListView.XForms.SwipeStartedEventArgs)">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeStarted"/> event
            </summary>
            <param name="args">An <see cref="T:Syncfusion.ListView.XForms.SwipeStartedEventArgs">SwipeStartedEventArgs</see> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseSwipingEvent(Syncfusion.ListView.XForms.SwipingEventArgs)">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.Swiping"/> event
            </summary>
            <param name="args">An <see cref="T:Syncfusion.ListView.XForms.SwipingEventArgs">SwipingEventArgs</see> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseSwipeEndedEvent(Syncfusion.ListView.XForms.SwipeEndedEventArgs)">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeEnded"/> event
            </summary>
            <param name="args">An <see cref="T:Syncfusion.ListView.XForms.SwipeEndedEventArgs">SwipeEndedEventArgs</see> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseResetSwipeEvent(Syncfusion.ListView.XForms.ResetSwipeEventArgs)">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeReset"/> event
            </summary>
            <param name="args">An <see cref="T:Syncfusion.ListView.XForms.ResetSwipeEventArgs">ResetSwipeEventArgs</see> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseQueryItemSize(Syncfusion.ListView.XForms.QueryItemSizeEventArgs)">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.QueryItemSize"/> event.
            </summary>
            <param name="args">An <see cref="T:Syncfusion.ListView.XForms.QueryItemSizeEventArgs">QueryItemSizeEventArgs</see> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.CanQueryItemSize">
            <summary>
            Helper method for can query the item size.
            </summary>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseItemDraggingEvent(Syncfusion.ListView.XForms.ItemDraggingEventArgs)">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemDragging"/> event.
            </summary>
            <param name="args">An <see cref="E:Syncfusion.ListView.XForms.SfListView.ItemDragging"/> that contains data for dragging event.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.RaiseScrollStateChanged(Syncfusion.ListView.XForms.ScrollStateChangedEventArgs)">
            <summary>
            Helper method to raise the <see cref="E:Syncfusion.ListView.XForms.SfListView.ScrollStateChanged"/> event.
            </summary>
            <param name="args">An <see cref="T:Syncfusion.ListView.XForms.ScrollStateChangedEventArgs"/> that contains the data for scroll state changed event.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.CanLayoutFooter">
            <summary>
            Helper method to determine whether we need to layout the footer when <see cref="P:Syncfusion.ListView.XForms.SfListView.IsStickyFooter"/> value is "true" and <see cref="P:Syncfusion.ListView.XForms.SfListView.StickyFooterPosition"/> value is "FooterPosition.Body".
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.Dispose(System.Boolean)">
            <summary>
            Dispose the instances, if parameter is true.
            </summary>
            <param name="disposing">Represents the boolean value for disposing objects</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnPropertyChanged(System.String)">
            <summary>
            Need to handle the run time changes of <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="propertyName">Represents the property changed event arguments.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.SetRTL">
            <summary>
            Sets the flow direction value to the listview when it is applied to its parent.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnMeasure(System.Double,System.Double)">
            <summary>
            This method is called during the measure pass of a layout cycle to get the desired size of an element.
            </summary>
            <param name="widthConstraint">The available width for the element to use.</param>
            <param name="heightConstraint">The available height for the element to use.</param>
            <returns> A <see cref="T:Xamarin.Forms.SizeRequest"/> which contains the desired size of the element.</returns>
            <remarks>The results of this method will be (-1, -1) if the element has not yet been realized with a platform specific backing control.
            Overriding this method does not require a call to the base class so long as a valid SizeRequest is returned.</remarks>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Override method to layout the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> children.
            </summary>
            <param name="x">Represents the 'x' position to layout the children.</param>
            <param name="y">Represents the 'y' position to layout the children.</param>
            <param name="width">Represents the width of the child element.</param>
            <param name="height">Represents the height of the child element.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.LayoutStickyFooter">
            <summary>
            Arrange/Layout the Sticky Footer when the <see cref="P:Syncfusion.ListView.XForms.SfListView.StickyFooterPosition"/> is Body.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnSizeAllocated(System.Double,System.Double)">
            <summary>
            Override method to allocate the total size of the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
            <param name="width">Represents the width of the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
            <param name="height">Represents the height of the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.ShouldInvalidateOnChildAdded(Xamarin.Forms.View)">
            <summary>
            Override method to determine whether to invalidate on child added.
            </summary>
            <param name="child">Represents the View which is to be added.</param>
            <returns>Returns the boolean value accordingly.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View)">
            <summary>
            Override method to determine whether to invalidate on child removed.
            </summary>
            <param name="child">Represents the View which is to be removed.</param>
            <returns>Returns the boolean value accordingly.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnItemsSourceChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the ItemsSource property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnItemSizeChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemSize"/> property is changed
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of item length</param>
            <param name="newValue">the new value of item length.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnHeaderSizeChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.HeaderSize"/> property is changed
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of header length</param>
            <param name="newValue">the new value of header length.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnFooterSizeChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.FooterSize"/> property is changed
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of footer length.</param>
            <param name="newValue">the new value of footer length.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnGroupHeaderSizeChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.GroupHeaderSize"/> property is changed
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of group header length.</param>
            <param name="newValue">the new value of group header length.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnHeaderTemplateChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when header, isStickyHeader and header template changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnFooterTemplateChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when footer, isStickyFooter and footer template changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnIsBusyChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the IsBusy changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnLoadMoreTemplateChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when load more template changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnLoadMoreItemPositionChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when load more position changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnLoadMoreOptionChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when load more option changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnStickyHeaderChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when <see cref="P:Syncfusion.ListView.XForms.SfListView.IsStickyHeader"/> changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnStickyFooterChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when IsStickyFooter changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnLayoutManagerChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the LayoutManager property is changed
            </summary>
            <param name="bindable"><see cref="T:Syncfusion.ListView.XForms.SfListView"/> object</param>
            <param name="oldValue">The old value of LayoutManager</param>
            <param name="newValue">The new value of LayoutManager</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnItemSpacingChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the ItemSpacing property is changed
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of item spacing.</param>
            <param name="newValue">the new value of item spacing.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnFocusBorderThicknessChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.FocusBorderThickness"/> property is changed
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of item spacing.</param>
            <param name="newValue">the new value of item spacing.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnItemTemplateChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the ItemTemplate property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of ItemTemplate.</param>
            <param name="newValue">The new value of ItemTemplate.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnDataSourceChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the DataSource property is changed. 
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of the DataSource.</param>
            <param name="newValue">The new value of the DataSource</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnSelectionModeChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionMode"/> is changed.
            </summary>
            <param name="bindable"><see cref="T:Syncfusion.ListView.XForms.SfListView"/> object</param>
            <param name="oldValue">Gets the old selection mode</param>
            <param name="newValue">Gets the new selection mode</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnSelectedItemTemplateChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectedItemTemplate"/> is changed.
            </summary>
            <param name="bindable"><see cref="T:Syncfusion.ListView.XForms.SfListView"/> object</param>
            <param name="oldValue">The old value of Selection template</param>
            <param name="newValue">The new value of Selection template</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnSelectedItemChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectedItem"/> property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of the selected item.</param>
            <param name="newValue">the new value of the selected item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnSelectedItemsChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectedItems"/> property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of the selected items.</param>
            <param name="newValue">The new value of the selected items.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnCurrentItemChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.CurrentItem"/> property is changed
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnGroupHeaderTemplateChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.GroupHeaderTemplate"/> property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of GroupHeaderTemplate.</param>
            <param name="newValue">The new value of GroupHeaderTemplate.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnSelectionBackgroundColorChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectionBackgroundColor"/> property is changed
            </summary>
            <param name="bindable"><see cref="T:Syncfusion.ListView.XForms.SfListView"/> object</param>
            <param name="oldValue">The old value of selection color</param>
            <param name="newValue">The new value of selection color</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnFocusBorderColorChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.FocusBorderColor"/> property is changed.
            </summary>
            <param name="bindable"><see cref="T:Syncfusion.ListView.XForms.SfListView"/> object</param>
            <param name="oldValue">The old value of selection color</param>
            <param name="newValue">The new value of selection color</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnStickyGroupHeaderChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when <see cref="P:Syncfusion.ListView.XForms.SfListView.IsStickyGroupHeader"/> property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnOrientationChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when the ItemHeight property is changed
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as bindable object.</param>
            <param name="oldValue">The old value of item height</param>
            <param name="newValue">the new value of item height.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnAllowSwipingChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when <see cref="P:Syncfusion.ListView.XForms.SfListView.AllowSwiping"/> property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as the bindable object.</param>
            <param name="oldValue">Represents the old value.</param>
            <param name="newValue">Represents the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnLeftSwipeTemplateChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when <see cref="P:Syncfusion.ListView.XForms.SfListView.LeftSwipeTemplate"/> property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as the bindable object.</param>
            <param name="oldValue">Represents the old value.</param>
            <param name="newValue">Represents the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnRightSwipeTemplateChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when <see cref="P:Syncfusion.ListView.XForms.SfListView.RightSwipeTemplate"/> property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as the bindable object.</param>
            <param name="oldValue">Represents the old value.</param>
            <param name="newValue">Represents the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnAutoFitModeChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when <see cref="P:Syncfusion.ListView.XForms.SfListView.AutoFitMode"/> property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as the bindable object.</param>
            <param name="oldValue">Represents the old value.</param>
            <param name="newValue">Represents the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnDragStartModeChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Occurs when <see cref="P:Syncfusion.ListView.XForms.SfListView.DragStartMode"/> property is changed.
            </summary>
            <param name="bindable">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> as the bindable object.</param>
            <param name="oldValue">Represents the old value.</param>
            <param name="newValue">Represents the new value.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.OnDataSourceChanged(System.Object,System.Object)">
            <summary>
            Occurs when the DataSource is changed after the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> is loaded. 
            </summary>
            <param name="oldValue">The old value of the DataSource.</param>
            <param name="newValue">The new value of the DataSource.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.SelectedItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.SelectedItems"/> collection is changed. 
            </summary>
            <param name="sender">Represents the selected <see cref="T:Syncfusion.ListView.XForms.SfListView"/> item</param>
            <param name="e">Represents the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.SfListView_BindingContextChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the ListView's binding context is changed. 
            </summary>
            <param name="sender">Represents the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
            <param name="e">Represents the <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.InitializeListView">
            <summary>
            Initialize the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.InitializeContainer">
            <summary>
            Initialize the <see cref="P:Syncfusion.ListView.XForms.SfListView.VisualContainer"/> and <see cref="T:Syncfusion.ListView.XForms.ExtendedScrollView"/>. And its added to children of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.WireEvents">
            <summary>
            Wire the events.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.UnWireEvents">
            <summary>
            UnWire the events.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.InitializeBindingProperties">
            <summary>
            Initializes the binding properties of <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListView.DataSource_SourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            To handle the source collection changed.
            </summary>
            <param name="sender">Represents the DataSource collection</param>
            <param name="e">Represents the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/></param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.NamespaceDoc">
            <summary>
            Provides classes, interfaces and enumerators which are required to create and work with the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> to present a set of data items in different layouts or views.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SwipeController">
            <summary>
            Handles the swiping interaction and related operations.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.#ctor(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.SwipeController"/> class.
            </summary>
            <param name="listView">The ListView.</param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeController.ListView">
            <summary>
            Gets the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> element.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeController.LeftSwipeView">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.View"/> which is created using left swipe template.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeController.RightSwipeView">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.View"/> which is created using right swipe template
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeController.SwipedItemInfo">
            <summary>
            Gets or sets a value hold the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> for check its animation is whether completed or not. 
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeController.IsInSwiping">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.ListView.XForms.VisualContainer"/> 
            contain any child is in swipe.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeController.HasSwipedItem">
            <summary>
            Gets or sets a value indicating whether the item has swiped view.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeController.ItemLocation">
            <summary>
            Gets or sets the Actual location of the ListViewItem before swiping. It will be used while layout the item with SwipeView in Grid Layout.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.Dispose">
            <summary>
            Disposes the instances.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.RaiseSwipeStarted(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Double)">
            <summary>
            Raises the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeStarted"/> event and adds the <see cref="T:Syncfusion.ListView.XForms.SwipeView"/> as child into the <see cref="T:Syncfusion.ListView.XForms.VisualContainer"/>.
            </summary>
            <param name="itemInfo">Represents the listView item info.</param>
            <param name="offset">Represents the scroll offset value.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.RaiseSwiping(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Double)">
            <summary>
            Raises the <see cref="E:Syncfusion.ListView.XForms.SfListView.Swiping"/> event.
            </summary>
            <param name="itemInfo">Represents the listView item info.</param>
            <param name="offset">Represents the scroll offset value.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.RaiseSwipeEnded(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Double)">
            <summary>
            Raises the <see cref="E:Syncfusion.ListView.XForms.SfListView.SwipeEnded"/> event and assigns the <see cref="P:Syncfusion.ListView.XForms.ListViewItemInfoBase.SwipeOffset"/> to the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> and <see cref="T:Syncfusion.ListView.XForms.SwipeView"/>.
            </summary>
            <param name="itemInfo">Determines the listView item info.</param>
            <param name="offset">Determines the scroll offset value.</param>
            <returns>Returns the offset value.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.ResetSwipe(System.Boolean,Syncfusion.ListView.XForms.ListViewItem)">
            <summary>
            Moves the swiped <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> to its default position.
            </summary>
            <param name="canAnimate">Indicates whether animated the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/></param>
            <param name="item">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.CollapseLeftSwipeView(Syncfusion.ListView.XForms.SwipeView,System.Boolean,Syncfusion.ListView.XForms.ListViewItem)">
            <summary>
            Collapse the SwipeView and remove the view from VisualContainer.
            </summary>
            <param name="view">Represents the swipe view</param>
            <param name="canAnimate">It ensure whether the <see cref="T:Syncfusion.ListView.XForms.SwipeView"/> can animated or not while resetting.</param>
            <param name="item">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.CollapseRightSwipeView(Syncfusion.ListView.XForms.SwipeView,System.Boolean,Syncfusion.ListView.XForms.ListViewItem)">
            <summary>
            Collapse the SwipeView and remove the view from VisualContainer.
            </summary>
            <param name="view">Represents the swipe view</param>
            <param name="canAnimate">It ensure whether the <see cref="T:Syncfusion.ListView.XForms.SwipeView"/> can animated or not while resetting.</param>
            <param name="item">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/></param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.HandleTouchInteractions(Syncfusion.ListView.XForms.ListViewItemInfoBase,Xamarin.Forms.GestureStatus,Xamarin.Forms.Point)">
            <summary>
            Handles the touch interaction. 
            </summary>
            <param name="itemInfo">ListViewItemInfo for touch over item</param>
            <param name="status">Denotes touch action</param>
            <param name="point">Touch position</param>
            <returns>Returns true, if SwipeController itself handles the touch.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.HandleItemTapped(Syncfusion.ListView.XForms.ListViewItemInfo)">
            <summary>
            Handles the item tapped(Clicked) and resets the swipe.
            </summary>
            <param name="itemInfo">ListViewItemInfo for tapped item</param>
            <returns>Returns true, if SwipeController itself handles the touch.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.SwipeListViewItem(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Double)">
            <summary>
            Helper method to swipe the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> programmatically based on the given offset value.
            </summary>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfoBase"/>.</param>
            <param name="offset">Represents the value that how much the item need to swipe.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.InitializeSwiping(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Double,System.Boolean)">
            <summary>
            Helper method initialized to swipe the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/> based on the given offset value.
            </summary>
            <param name="itemInfo">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItemInfoBase"/>.</param>
            <param name="offset">Represents the value that how much the item need to swipe.</param>
            <param name="validateOffset">false to set the programmatic swipe offset value; otherwise, true. The default is true.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.Dispose(System.Boolean)">
            <summary>
            Dispose the instances, if parameter is true.
            </summary>
            <param name="disposing">Represents the boolean value for disposing objects</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.ProcessTouchDown(Syncfusion.ListView.XForms.ListViewItemInfoBase,Xamarin.Forms.Point)">
            <summary>
            Process the touch down related operations.
            </summary>
            <param name="itemInfo">ListViewItemInfo under touch</param>
            <param name="point">Touch position</param>
            <returns>Returns true, if pass touch notifications to parent. Else, don't pass touch notification further.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.ProcessTouchUp(Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Process the touch up related operations.
            </summary>
            <param name="itemInfo">ListViewItemInfo under touch</param>
            <returns>Returns true, if pass touch notifications to parent. Else, don't pass touch notification further.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.ProcessTouchMove(Syncfusion.ListView.XForms.ListViewItemInfoBase,Xamarin.Forms.Point)">
            <summary>
            Process the touch move related operations.
            </summary>
            <param name="itemInfo">ListViewItemInfo under touch</param>
            <param name="point">Touch position</param>
            <returns>Returns true, if pass touch notifications to parent. Else, don't pass touch notification further.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.CheckAbortAnimation(Syncfusion.ListView.XForms.ListViewItemInfoBase)">
            <summary>
            Check whether to abort previous animation.
            </summary>
            <param name="itemInfo"><see cref="T:Syncfusion.ListView.XForms.ListViewItemInfo"/> under touch move</param>
            <returns>Returns true, AbortAnimation is execute, Otherwise skip</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.ValidateOffset(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Double)">
            <summary>
            Validate and returns the maximum offset, if offset is greater than Item size.
            </summary>
            <param name="itemInfo">Represents the item info.</param>
            <param name="offset">Represents the offset value.</param>
            <returns>Returns the valid offset.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.InitializeSwipeView(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Double)">
            <summary>
            Initialize the corresponding swipe view and collapse the another one.
            </summary>
            <param name="itemInfo">Represents the item info</param>
            <param name="offset">Represents the swipe offset value</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.LayoutSwipeView(Syncfusion.ListView.XForms.ListViewItemInfoBase,System.Boolean)">
            <summary>
            Layout the SwipeView and ListViewItem.
            </summary>
            <param name="itemInfo">Represents the item info</param>
            <param name="canAnimate">It ensure whether the layout can animated or not while layout.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeController.ResolveItemIndex(System.Int32)">
            <summary>
            Helper method to find the item index for Swiping events.
            </summary>
            <param name="itemIndex">Indicates the actual item index.</param>
            <returns>Returns the item index.</returns>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SwipeView">
            <summary>
            Represents the swipe view in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeView.#ctor(Syncfusion.ListView.XForms.SfListView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.SwipeView"/> class.
            </summary>
            <param name="listView">The <see cref="T:Syncfusion.ListView.XForms.SfListView"/> instance.</param>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeView.Visibility">
            <summary>
            Gets or sets a value indicating whether the visibility of <see cref="T:Syncfusion.ListView.XForms.SwipeView"/> is true or not.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeView.ListView">
            <summary>
            Gets the <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.SwipeView.Template">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.DataTemplate"/> for <see cref="P:Syncfusion.ListView.XForms.SfListView.LeftSwipeTemplate"/> and <see cref="P:Syncfusion.ListView.XForms.SfListView.RightSwipeTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeView.Dispose">
            <summary>
            Disposes all available resources.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeView.LayoutSwipeView(Syncfusion.ListView.XForms.ListViewItem,System.Boolean)">
            <summary>
            Arranges the <see cref="T:Syncfusion.ListView.XForms.SwipeView"/> based on swipe offset of the list view item.
            </summary>
            <param name="item">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/></param>
            <param name="canAnimate">It ensure whether the <see cref="T:Syncfusion.ListView.XForms.SwipeView"/> can animated or not while layout.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeView.LayoutSwipeView(Syncfusion.ListView.XForms.ListViewItem,System.Double)">
            <summary>
            Arranges the <see cref="T:Syncfusion.ListView.XForms.SwipeView"/> based on swipe offset of the list view item.
            </summary>
            <param name="item">Represents the <see cref="T:Syncfusion.ListView.XForms.ListViewItem"/></param>
            <param name="offset">Determines whether left or right swipe view need to layout.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeView.Reset">
            <summary>
            Helper method to close the <see cref="T:Syncfusion.ListView.XForms.SwipeView"/> visibility.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeView.AddItemChild(Xamarin.Forms.DataTemplate)">
            <summary>
            Adds the template into the <see cref="T:Syncfusion.ListView.XForms.SwipeView"/>
            </summary>
            <param name="template">data template for swipe view.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeView.AddChild(Xamarin.Forms.View)">
            <summary>
            Add the children to content of <see cref="T:Syncfusion.ListView.XForms.SwipeView"/>.
            </summary>
            <param name="child">Represents the child view which is to be added as the content for this instance</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeView.ShouldInvalidateOnChildAdded(Xamarin.Forms.View)">
            <summary>
            Method to decide whether to call <see cref="M:Xamarin.Forms.VisualElement.InvalidateMeasure"/> or not.
            </summary>
            <param name="child">The content of the <see cref="T:Syncfusion.ListView.XForms.SwipeView"/>.</param>
            <returns>A boolean value to decide whether to invalidate when adding a child.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeView.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View)">
            <summary>
            Method to decide whether to call <see cref="M:Xamarin.Forms.VisualElement.InvalidateMeasure"/> or not.
            </summary>
            <param name="child">The content of the <see cref="T:Syncfusion.ListView.XForms.SwipeView"/>.</param>
            <returns>A boolean value to decide whether to invalidate when removing a child.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SwipeView.Dispose(System.Boolean)">
            <summary>
            Disposes the instances, if the parameter is set to true.
            </summary>
            <param name="disposing">Represents the boolean value for disposing objects</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.ExtendedScrollView">
            <summary>
            Represents a customized <see cref="T:Xamarin.Forms.ScrollView"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ExtendedScrollView.scrollposition">
            <summary>
            Gets or sets the scroll position when <see cref="!:SfListView.ScrollTo(double)"/> is performed with disabled animation.
            </summary>
        </member>
        <member name="F:Syncfusion.ListView.XForms.ExtendedScrollView.currentScrollState">
            <summary>
            Represents the current scroll state 
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ExtendedScrollView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.ExtendedScrollView"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ExtendedScrollView.CurrentScrollState">
            <summary>
            Gets or sets a value indicating the current scroll state.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ExtendedScrollView.ScrollEndPosition">
            <summary>
            Gets or sets a scrolling position value when <see cref="F:Syncfusion.ListView.XForms.ScrollState.Programmatic"/> scrolling is performed.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ExtendedScrollView.ScrollPosition">
            <summary>
            Gets or sets the value need to scroll manually when <see cref="T:Syncfusion.ListView.XForms.AutoFitMode"/> is other than <see cref="F:Syncfusion.ListView.XForms.AutoFitMode.None"/> or <see cref="P:Syncfusion.ListView.XForms.SfListView.HasGroups"/> is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ExtendedScrollView.ScrollBarSize">
            <summary>
            Gets or sets the size of the scroll bar for macOS platform when show scrollbars option in mac settings is always, need to consider the scrollbar size to avoid the clipping issues.
            </summary>
            <value>The size of the scroll bar.</value>
        </member>
        <member name="P:Syncfusion.ListView.XForms.ExtendedScrollView.Container">
            <summary>
            Gets the VisualContainer.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ExtendedScrollView.Dispose">
            <summary>
            Disposes all available resources.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ExtendedScrollView.ForceLayoutChildren">
            <summary>
            To manually layout the children of scrollView when TotalExtent of visualContainer is changed. Because ScrollView is not layout when TotalExtent is changed while QueryItemSize.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ExtendedScrollView.OnScrollStateChanged(Syncfusion.ListView.XForms.ScrollState)">
            <summary>
            Raises the <see cref="E:Syncfusion.ListView.XForms.SfListView.ScrollStateChanged"/> event.
            </summary>
            <param name="scrollstate">Represents the scrolling state for <see cref="T:Syncfusion.ListView.XForms.SfListView"/>.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ExtendedScrollView.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Positions and sizes the children of ScrollView.
            </summary>
            <param name="x">A value that represents the x coordinate of the child.</param>
            <param name="y">A value that represents the y coordinate of the child.</param>
            <param name="width">A value that represents the width of the child.</param>
            <param name="height">A value that represents the height of the child.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.ExtendedScrollView.Dispose(System.Boolean)">
            <summary>
            Disposes the instances, if the parameter is set to true.
            </summary>
            <param name="disposing">Represents the boolean value for disposing objects</param>
        </member>
        <member name="T:Syncfusion.ListView.XForms.IVisibility">
            <summary>
            Define property for visibility.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.IVisibility.Visibility">
            <summary>
            Gets or sets a value indicating whether the visibility of Item is true or not.
            </summary>
        </member>
        <member name="T:Syncfusion.ListView.XForms.VisualContainer">
            <summary>
            A scrollable visual container that holds the item elements. Handles the arrange and measure logics of all elements.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.#ctor">
            <summary>
            Initializes a new instance of the VisualContainer class.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.VisualContainer.ScrollRows">
            <summary>
            Gets a reference to the <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase"/> instance which contains the information of row lines.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.VisualContainer.ScrollOwner">
            <summary>
            Gets a reference to the <see cref="T:Syncfusion.ListView.XForms.ExtendedScrollView"/> instance.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.VisualContainer.RowHeights">
            <summary>
            Gets the row height from the <see cref="T:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.VisualContainer.ScrollBar">
            <summary>
            Gets a reference to the class that implements <see cref="T:Syncfusion.GridCommon.ScrollAxis.IScrollBar"/> which contains the vertical scroll bar information.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.VisualContainer.TotalExtent">
            <summary>
            Gets the extent height of the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.VisualContainer.RowCount">
            <summary>
            Gets or sets the row count in the <see cref="T:Syncfusion.ListView.XForms.SfListView"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.VisualContainer.ScrollOffset">
            <summary>
            Gets or sets the scroll offset
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.VisualContainer.ListViewLayoutManager">
            <summary>
            Gets or sets the layout manager.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.VisualContainer.PreviousScrollOffset">
            <summary>
            Gets or sets the previous scroll offset. This is used to avoid the flickering issue while performing the drag and drop operation.
            </summary>
        </member>
        <member name="P:Syncfusion.ListView.XForms.VisualContainer.PreviousRowCount">
            <summary>
            Gets or sets the previous row count before adding items in the list when the <see cref="P:Syncfusion.ListView.XForms.SfListView.IsBusy"/> value set to 'true'.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.Dispose">
            <summary>
            Disposes all allocated resources.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.ResetRowHeights">
            <summary>
            Reset the custom heights from the LineSizeCollection.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.ExtendedScrollView_Scrolled(System.Object,Xamarin.Forms.ScrolledEventArgs)">
            <summary>
            Call Back for the Scrolled event of the ScrollView.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The ScrolledEventArgs.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.UpdateScrollBar">
            <summary>
            Update the scroll bar.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.InsertRows(System.Int32,System.Int32)">
            <summary>
            Inserts the given number of row lines at the given index in the <see cref="T:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection"/>.
            </summary>
            <param name="insertAtRowIndex">The index to insert the lines.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.RemoveRows(System.Int32,System.Int32)">
            <summary>
            Removes the given number of row lines from the given index in the <see cref="T:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection"/>.
            </summary>
            <param name="removeAtRowIndex">The index to remove the lines.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.GetSize(System.Double,System.Double)">
            <summary>
            Returns the container size when the layout has changed to update the view.
            </summary>
            <param name="widthConstraint">Its represents available width</param>
            <param name="heightConstraint">Its represents available height</param>
            <returns>Returns the measured size.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.OnItemsSourceChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.ListView.XForms.SfListView.ItemsSource"/> is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.SetDefaultLineSize(System.Double)">
            <summary>
            Set the default line size.
            </summary>
            <param name="size">The size of the line</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.ClearChildren">
            <summary>
            Helper method for clear the children.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.ResetOffset">
            <summary>
            Resets the horizontal and vertical offset.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.ResetScrollBars">
            <summary>
            Reset the ScrollRows. Because the scrollbar value is not updated when layout changed.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.OnSizeAllocated(System.Double,System.Double)">
            <summary>
            Allocates the size of item elements.
            </summary>
            <param name="width">The new width of the element</param>
            <param name="height">The new height of the element</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Positions and sizes the children of VisualContainer.
            </summary>
            <param name="x">A value that represents the x coordinate of the child.</param>
            <param name="y">A value that represents the y coordinate of the child.</param>
            <param name="width">A value that represents the width of the child.</param>
            <param name="height">A value that represents the height of the child.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.OnMeasure(System.Double,System.Double)">
            <summary>
            Gets the desired size of an element.
            </summary>
            <param name="widthConstraint">The available width for the element to use.</param>
            <param name="heightConstraint">The available height for the element to use.</param>
            <returns> A <see cref="T:Xamarin.Forms.SizeRequest"/> which contains the desired size of the element.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.ShouldInvalidateOnChildAdded(Xamarin.Forms.View)">
            <summary>
            Method to decide whether to call <see cref="M:Xamarin.Forms.VisualElement.InvalidateMeasure"/> when adding a child or not.
            </summary>
            <param name="child">The content of the VisualContainer.</param>
            <returns>A boolean value do decide whether to invalidate when adding a child.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View)">
            <summary>
            Method to decide whether to call <see cref="M:Xamarin.Forms.VisualElement.InvalidateMeasure"/> when removing a child or not.
            </summary>
            <param name="child">The content of the VisualContainer.</param>
            <returns>A boolean value do decide whether to invalidate when removing a child.</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.Dispose(System.Boolean)">
            <summary>
            Dispose the instances, if parameter is true.
            </summary>
            <param name="disposing">Represents the boolean value for disposing objects</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.CreateScrollAxis(System.Boolean,Syncfusion.GridCommon.ScrollAxis.IScrollBar,Syncfusion.GridCommon.ScrollAxis.ILineSizeHost)">
            <summary>
            Creates a new instance of <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase"/>.
            </summary>
            <param name="pixelScroll">A boolean value denoting pixel or line scrolling.</param>
            <param name="scrollBar">The scroll bar.</param>
            <param name="lineSizes">The line sizes.</param>
            <returns>Returns the <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase"/></returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.ForceLayoutScrollView">
            <summary>
            Layouts the scroll view manually when the size is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.UpdateAxis(Xamarin.Forms.Size)">
            <summary>
            Update the render size of ScrollRows.
            </summary>
            <param name="availableSize">Renders the available size of the element</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.EnsureItems">
            <summary>
            Ensure the visible items.
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.ArrangeItems(Xamarin.Forms.Size)">
            <summary>
            Arranges the visible item in the VisualContainer based on the width and Visible lines information.
            </summary>
            <param name="size">Size for arrange the elements</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.SetRowCount(System.Int32)">
            <summary>
            Set the item count for create the lines based on Orientation of layout.
            </summary>
            <param name="value">The count of item.</param>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.GetRowCount">
            <summary>
            Get the item count based on Orientation
            </summary>
            <returns>Returns the out of the item</returns>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.ForceLayoutChildren">
            <summary>
            Forces the children to layout when the framework layout fails. 
            </summary>
            <remarks>Hack code to fix the ListView not loaded issue in UWP platforms. 
            Need to check for every release and remove if fixed in framework.
            May get fixed if we arrange the children of ListView manually.</remarks>
        </member>
        <member name="M:Syncfusion.ListView.XForms.VisualContainer.OnCreateLineSizeCollection">
            <summary>
            Creates a new instance of LineSizeCollection for getting the item heights.
            </summary>
            <returns>A new instance of the LineSizeCollection.</returns>
        </member>
        <member name="T:Syncfusion.ListView.XForms.SfListViewStyles">
            <summary>
            Dictionary for theming the list view control. 
            </summary>
        </member>
        <member name="M:Syncfusion.ListView.XForms.SfListViewStyles.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.ListView.XForms.SfListViewStyles" /> class.
            </summary>
        </member>
    </members>
</doc>
